
PDM_v3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000742  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000742  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000774  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000020f1  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000fa8  00000000  00000000  000029dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d34  00000000  00000000  00003985  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000464  00000000  00000000  000046bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000804  00000000  00000000  00004b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000121b  00000000  00000000  00005324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  0000653f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	77 c0       	rjmp	.+238    	; 0xf4 <__bad_interrupt>
   6:	00 00       	nop
   8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
   a:	00 00       	nop
   c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
   e:	00 00       	nop
  10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
  12:	00 00       	nop
  14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
  16:	00 00       	nop
  18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
  22:	00 00       	nop
  24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
  26:	00 00       	nop
  28:	63 c1       	rjmp	.+710    	; 0x2f0 <__vector_10>
  2a:	00 00       	nop
  2c:	63 c0       	rjmp	.+198    	; 0xf4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	61 c0       	rjmp	.+194    	; 0xf4 <__bad_interrupt>
  32:	00 00       	nop
  34:	5f c0       	rjmp	.+190    	; 0xf4 <__bad_interrupt>
  36:	00 00       	nop
  38:	5d c0       	rjmp	.+186    	; 0xf4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5b c0       	rjmp	.+182    	; 0xf4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	59 c0       	rjmp	.+178    	; 0xf4 <__bad_interrupt>
  42:	00 00       	nop
  44:	57 c0       	rjmp	.+174    	; 0xf4 <__bad_interrupt>
  46:	00 00       	nop
  48:	55 c0       	rjmp	.+170    	; 0xf4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	53 c0       	rjmp	.+166    	; 0xf4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	51 c0       	rjmp	.+162    	; 0xf4 <__bad_interrupt>
  52:	00 00       	nop
  54:	4f c0       	rjmp	.+158    	; 0xf4 <__bad_interrupt>
  56:	00 00       	nop
  58:	4d c0       	rjmp	.+154    	; 0xf4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4b c0       	rjmp	.+150    	; 0xf4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	49 c0       	rjmp	.+146    	; 0xf4 <__bad_interrupt>
  62:	00 00       	nop
  64:	47 c0       	rjmp	.+142    	; 0xf4 <__bad_interrupt>
  66:	00 00       	nop
  68:	45 c0       	rjmp	.+138    	; 0xf4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	43 c0       	rjmp	.+134    	; 0xf4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	41 c0       	rjmp	.+130    	; 0xf4 <__bad_interrupt>
  72:	00 00       	nop
  74:	3f c0       	rjmp	.+126    	; 0xf4 <__bad_interrupt>
  76:	00 00       	nop
  78:	3d c0       	rjmp	.+122    	; 0xf4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3b c0       	rjmp	.+118    	; 0xf4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	39 c0       	rjmp	.+114    	; 0xf4 <__bad_interrupt>
  82:	00 00       	nop
  84:	37 c0       	rjmp	.+110    	; 0xf4 <__bad_interrupt>
  86:	00 00       	nop
  88:	35 c0       	rjmp	.+106    	; 0xf4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	33 c0       	rjmp	.+102    	; 0xf4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	31 c0       	rjmp	.+98     	; 0xf4 <__bad_interrupt>
  92:	00 00       	nop
  94:	2f c0       	rjmp	.+94     	; 0xf4 <__bad_interrupt>
  96:	00 00       	nop
  98:	2d c0       	rjmp	.+90     	; 0xf4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2b c0       	rjmp	.+86     	; 0xf4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	29 c0       	rjmp	.+82     	; 0xf4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	27 c0       	rjmp	.+78     	; 0xf4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	25 c0       	rjmp	.+74     	; 0xf4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	23 c0       	rjmp	.+70     	; 0xf4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	21 c0       	rjmp	.+66     	; 0xf4 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	1f c0       	rjmp	.+62     	; 0xf4 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1d c0       	rjmp	.+58     	; 0xf4 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1b c0       	rjmp	.+54     	; 0xf4 <__bad_interrupt>
  be:	00 00       	nop
  c0:	19 c0       	rjmp	.+50     	; 0xf4 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	17 c0       	rjmp	.+46     	; 0xf4 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	15 c0       	rjmp	.+42     	; 0xf4 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	13 c0       	rjmp	.+38     	; 0xf4 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	11 c0       	rjmp	.+34     	; 0xf4 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	0f c0       	rjmp	.+30     	; 0xf4 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0d c0       	rjmp	.+26     	; 0xf4 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0b c0       	rjmp	.+22     	; 0xf4 <__bad_interrupt>
  de:	00 00       	nop
  e0:	09 c0       	rjmp	.+18     	; 0xf4 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	e6 d0       	rcall	.+460    	; 0x2be <main>
  f2:	fb c2       	rjmp	.+1526   	; 0x6ea <_exit>

000000f4 <__bad_interrupt>:
  f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <board_init>:
    MCP2515_init(POWER_CAN);
}

void board_init(void) {
	//Permanently energised boards
	HL12enableON;	// D1 of MC33932 - Disable state on: OUT1 & OUT2 are 3-state disabled  -  D1 input is used to 3-state disable the H-bridge outputs.
  f6:	e5 e0       	ldi	r30, 0x05	; 5
  f8:	f1 e0       	ldi	r31, 0x01	; 1
  fa:	80 81       	ld	r24, Z
  fc:	88 60       	ori	r24, 0x08	; 8
  fe:	80 83       	st	Z, r24
	HL34enableON;	//
 100:	a1 9a       	sbi	0x14, 1	; 20
	
	HC1ON;			//chassis controller power on
 102:	e2 e0       	ldi	r30, 0x02	; 2
 104:	f1 e0       	ldi	r31, 0x01	; 1
 106:	80 81       	ld	r24, Z
 108:	80 61       	ori	r24, 0x10	; 16
 10a:	80 83       	st	Z, r24
	HC2ON;			//BMS power on
 10c:	75 9a       	sbi	0x0e, 5	; 14
	HC3ON;			//shutdown positive on - will be changed
 10e:	74 9a       	sbi	0x0e, 4	; 14
	HLchan2OFF;		//shutdown negative on - will be changed
 110:	80 81       	ld	r24, Z
 112:	8f 7b       	andi	r24, 0xBF	; 191
 114:	80 83       	st	Z, r24
	HLchan4ON;		//inverter power on
 116:	2f 9a       	sbi	0x05, 7	; 5
	HC8ON;			//steering wheel and radio power on
 118:	eb e0       	ldi	r30, 0x0B	; 11
 11a:	f1 e0       	ldi	r31, 0x01	; 1
 11c:	80 81       	ld	r24, Z
 11e:	80 61       	ori	r24, 0x10	; 16
 120:	80 83       	st	Z, r24
 122:	08 95       	ret

00000124 <io_init>:
 * 
 * Reference: ATmega Datasheet Chapter 13 (I/O-Ports)
 * 
 */
void io_init(void) {
	DDRA |= 0b00000001;		//PA0 - CAN_SS // chip select
 124:	08 9a       	sbi	0x01, 0	; 1
	DDRB |= 0b10010110;		//PB7 PWM13; PB4 PWM10; PB2 MOSI; PB1 SCK
 126:	84 b1       	in	r24, 0x04	; 4
 128:	86 69       	ori	r24, 0x96	; 150
 12a:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0b00000000;		//nil
 12c:	8a b1       	in	r24, 0x0a	; 10
 12e:	8a b9       	out	0x0a, r24	; 10
	DDRE |= 0b00111011;		//PE5 PWM2; PE4 PWM1; PE3 PWM9; PE1 greenLED; PE0 amberLED
 130:	8d b1       	in	r24, 0x0d	; 13
 132:	8b 63       	ori	r24, 0x3B	; 59
 134:	8d b9       	out	0x0d, r24	; 13
	DDRG |= 0b00100011;		//PG5 PWM12; PG1 HL34enable; PG0 HL34disable
 136:	83 b3       	in	r24, 0x13	; 19
 138:	83 62       	ori	r24, 0x23	; 35
 13a:	83 bb       	out	0x13, r24	; 19
	DDRH |= 0b01111000;		//PH6 PWM11; PH5 PWM4; PH3 PWM3; PH2 PWM7
 13c:	e1 e0       	ldi	r30, 0x01	; 1
 13e:	f1 e0       	ldi	r31, 0x01	; 1
 140:	80 81       	ld	r24, Z
 142:	88 67       	ori	r24, 0x78	; 120
 144:	80 83       	st	Z, r24
	DDRJ |= 0b00011000;		//PJ4 HL12disable; PJ3 HL12enable
 146:	e4 e0       	ldi	r30, 0x04	; 4
 148:	f1 e0       	ldi	r31, 0x01	; 1
 14a:	80 81       	ld	r24, Z
 14c:	88 61       	ori	r24, 0x18	; 24
 14e:	80 83       	st	Z, r24
	DDRL |= 0b00111000;		//PL3 PWM6; PL2 PWM8; PL1 PWM5
 150:	ea e0       	ldi	r30, 0x0A	; 10
 152:	f1 e0       	ldi	r31, 0x01	; 1
 154:	80 81       	ld	r24, Z
 156:	88 63       	ori	r24, 0x38	; 56
 158:	80 83       	st	Z, r24
	
	PORTA &= ~0b00000001;	//CAN_SS off
 15a:	10 98       	cbi	0x02, 0	; 2
	PORTB &= ~0b10010110;	//PWMs off; MOSI off
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	89 76       	andi	r24, 0x69	; 105
 160:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~0b11000000;	//HL34enable off; HL34disable on
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	8f 73       	andi	r24, 0x3F	; 63
 166:	8b b9       	out	0x0b, r24	; 11
	PORTE &= ~0b00111110;	//3 x PWMs off; LEDs off
 168:	8e b1       	in	r24, 0x0e	; 14
 16a:	81 7c       	andi	r24, 0xC1	; 193
 16c:	8e b9       	out	0x0e, r24	; 14
	PORTG &= ~0b00100011;	//PWM12 off
 16e:	84 b3       	in	r24, 0x14	; 20
 170:	8c 7d       	andi	r24, 0xDC	; 220
 172:	84 bb       	out	0x14, r24	; 20
	PORTH &= ~0b01111000;	//4 x PWMs off; HL34disable on; HL34enable off
 174:	e2 e0       	ldi	r30, 0x02	; 2
 176:	f1 e0       	ldi	r31, 0x01	; 1
 178:	80 81       	ld	r24, Z
 17a:	87 78       	andi	r24, 0x87	; 135
 17c:	80 83       	st	Z, r24
	PORTJ &= ~0b00011000;	//HL12disable on; HL12enable off
 17e:	e5 e0       	ldi	r30, 0x05	; 5
 180:	f1 e0       	ldi	r31, 0x01	; 1
 182:	80 81       	ld	r24, Z
 184:	87 7e       	andi	r24, 0xE7	; 231
 186:	80 83       	st	Z, r24
	PORTL &= ~0b00111000;	//3 x PWMs off
 188:	eb e0       	ldi	r30, 0x0B	; 11
 18a:	f1 e0       	ldi	r31, 0x01	; 1
 18c:	80 81       	ld	r24, Z
 18e:	87 7c       	andi	r24, 0xC7	; 199
 190:	80 83       	st	Z, r24
 192:	08 95       	ret

00000194 <firmware_init>:
		_delay_ms(200);
	}
}

void firmware_init(void) {
	io_init();
 194:	c7 df       	rcall	.-114    	; 0x124 <io_init>
    PCICR |= (1<<PCIE1); // Turning on PCIE1 bit in PCICR register
 196:	e8 e6       	ldi	r30, 0x68	; 104
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	82 60       	ori	r24, 0x02	; 2
 19e:	80 83       	st	Z, r24
    PCMSK1 |= (1<<PCINT15); // Turning on the PCINT15 bit in PCMSK1 register
 1a0:	ec e6       	ldi	r30, 0x6C	; 108
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	80 68       	ori	r24, 0x80	; 128
    SPI_init();
 1a8:	80 83       	st	Z, r24
    MCP2515_init(POWER_CAN);
 1aa:	90 d2       	rcall	.+1312   	; 0x6cc <SPI_init>
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	97 c1       	rjmp	.+814    	; 0x4de <MCP2515_init>
 1b0:	08 95       	ret

000001b2 <CAN_read_packet>:
	PORTH &= ~0b01111000;	//4 x PWMs off; HL34disable on; HL34enable off
	PORTJ &= ~0b00011000;	//HL12disable on; HL12enable off
	PORTL &= ~0b00111000;	//3 x PWMs off
}

void CAN_read_packet() {
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 1ba:	2d 97       	sbiw	r28, 0x0d	; 13
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	f8 94       	cli
 1c0:	de bf       	out	0x3e, r29	; 62
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;
	amberON;
 1c6:	70 9a       	sbi	0x0e, 0	; 14
	CAN_pull_packet(POWER_CAN, &numBytes, data, &ID);
 1c8:	9e 01       	movw	r18, r28
 1ca:	27 5f       	subi	r18, 0xF7	; 247
 1cc:	3f 4f       	sbci	r19, 0xFF	; 255
 1ce:	ae 01       	movw	r20, r28
 1d0:	4f 5f       	subi	r20, 0xFF	; 255
 1d2:	5f 4f       	sbci	r21, 0xFF	; 255
 1d4:	be 01       	movw	r22, r28
 1d6:	63 5f       	subi	r22, 0xF3	; 243
 1d8:	7f 4f       	sbci	r23, 0xFF	; 255
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	36 d2       	rcall	.+1132   	; 0x64a <CAN_pull_packet>
	if (ID == CAN_ID_PDM) {
 1de:	89 85       	ldd	r24, Y+9	; 0x09
 1e0:	9a 85       	ldd	r25, Y+10	; 0x0a
 1e2:	ab 85       	ldd	r26, Y+11	; 0x0b
 1e4:	bc 85       	ldd	r27, Y+12	; 0x0c
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	a1 05       	cpc	r26, r1
 1ea:	b9 40       	sbci	r27, 0x09	; 9
 1ec:	09 f0       	breq	.+2      	; 0x1f0 <CAN_read_packet+0x3e>
 1ee:	5e c0       	rjmp	.+188    	; 0x2ac <CAN_read_packet+0xfa>
		if(numBytes > 3) {
 1f0:	8d 85       	ldd	r24, Y+13	; 0x0d
 1f2:	84 30       	cpi	r24, 0x04	; 4
 1f4:	10 f0       	brcs	.+4      	; 0x1fa <CAN_read_packet+0x48>
			greenON;
 1f6:	71 9a       	sbi	0x0e, 1	; 14
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <CAN_read_packet+0x4a>
			} else {
			greenOFF;
 1fa:	71 98       	cbi	0x0e, 1	; 14
		}
		/* Byte 1 */
		if (CHECK_BIT(data[0], 0)) { /* Pump RHS */
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	80 ff       	sbrs	r24, 0
 200:	06 c0       	rjmp	.+12     	; 0x20e <CAN_read_packet+0x5c>
			HC4ON;
 202:	e2 e0       	ldi	r30, 0x02	; 2
 204:	f1 e0       	ldi	r31, 0x01	; 1
 206:	80 81       	ld	r24, Z
 208:	80 62       	ori	r24, 0x20	; 32
 20a:	80 83       	st	Z, r24
 20c:	05 c0       	rjmp	.+10     	; 0x218 <CAN_read_packet+0x66>
			} else {
			HC4OFF;
 20e:	e2 e0       	ldi	r30, 0x02	; 2
 210:	f1 e0       	ldi	r31, 0x01	; 1
 212:	80 81       	ld	r24, Z
 214:	8f 7d       	andi	r24, 0xDF	; 223
 216:	80 83       	st	Z, r24
		}
		if (CHECK_BIT(data[0], 1)) { /* Fan RHS */
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	81 ff       	sbrs	r24, 1
 21c:	06 c0       	rjmp	.+12     	; 0x22a <CAN_read_packet+0x78>
			HC5ON;
 21e:	eb e0       	ldi	r30, 0x0B	; 11
 220:	f1 e0       	ldi	r31, 0x01	; 1
 222:	80 81       	ld	r24, Z
 224:	88 60       	ori	r24, 0x08	; 8
 226:	80 83       	st	Z, r24
 228:	05 c0       	rjmp	.+10     	; 0x234 <CAN_read_packet+0x82>
			} else {
			HC5OFF;
 22a:	eb e0       	ldi	r30, 0x0B	; 11
 22c:	f1 e0       	ldi	r31, 0x01	; 1
 22e:	80 81       	ld	r24, Z
 230:	87 7f       	andi	r24, 0xF7	; 247
 232:	80 83       	st	Z, r24
		}
		if (CHECK_BIT(data[0], 2)) { /* Pump LHS */
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	82 ff       	sbrs	r24, 2
 238:	06 c0       	rjmp	.+12     	; 0x246 <CAN_read_packet+0x94>
			HC6ON;
 23a:	eb e0       	ldi	r30, 0x0B	; 11
 23c:	f1 e0       	ldi	r31, 0x01	; 1
 23e:	80 81       	ld	r24, Z
 240:	80 62       	ori	r24, 0x20	; 32
 242:	80 83       	st	Z, r24
 244:	05 c0       	rjmp	.+10     	; 0x250 <CAN_read_packet+0x9e>
			} else {
			HC6OFF;
 246:	eb e0       	ldi	r30, 0x0B	; 11
 248:	f1 e0       	ldi	r31, 0x01	; 1
 24a:	80 81       	ld	r24, Z
 24c:	8f 7d       	andi	r24, 0xDF	; 223
 24e:	80 83       	st	Z, r24
		}
		if (CHECK_BIT(data[0], 3)) { /* Fan LHS */
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	83 ff       	sbrs	r24, 3
 254:	06 c0       	rjmp	.+12     	; 0x262 <CAN_read_packet+0xb0>
			HC7ON;
 256:	e2 e0       	ldi	r30, 0x02	; 2
 258:	f1 e0       	ldi	r31, 0x01	; 1
 25a:	80 81       	ld	r24, Z
 25c:	88 60       	ori	r24, 0x08	; 8
 25e:	80 83       	st	Z, r24
 260:	05 c0       	rjmp	.+10     	; 0x26c <CAN_read_packet+0xba>
			} else {
			HC7OFF;
 262:	e2 e0       	ldi	r30, 0x02	; 2
 264:	f1 e0       	ldi	r31, 0x01	; 1
 266:	80 81       	ld	r24, Z
 268:	87 7f       	andi	r24, 0xF7	; 247
 26a:	80 83       	st	Z, r24
		}
		if (CHECK_BIT(data[0], 4)) { /* Brake */
 26c:	89 81       	ldd	r24, Y+1	; 0x01
 26e:	84 ff       	sbrs	r24, 4
 270:	02 c0       	rjmp	.+4      	; 0x276 <CAN_read_packet+0xc4>
			HLchan1ON;
 272:	2c 9a       	sbi	0x05, 4	; 5
 274:	01 c0       	rjmp	.+2      	; 0x278 <CAN_read_packet+0xc6>
			} else {
			HLchan1OFF;
 276:	2c 98       	cbi	0x05, 4	; 5
		}
		if (CHECK_BIT(data[0], 5)) {  /* Siren */
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	85 ff       	sbrs	r24, 5
 27c:	02 c0       	rjmp	.+4      	; 0x282 <CAN_read_packet+0xd0>
			HC9ON;
 27e:	73 9a       	sbi	0x0e, 3	; 14
 280:	01 c0       	rjmp	.+2      	; 0x284 <CAN_read_packet+0xd2>
			} else {
			HC9OFF;
 282:	73 98       	cbi	0x0e, 3	; 14
		}
		if (CHECK_BIT(data[0], 6)) { /* Shutdown - On */
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	86 ff       	sbrs	r24, 6
 288:	06 c0       	rjmp	.+12     	; 0x296 <CAN_read_packet+0xe4>
			HLchan2ON;
 28a:	e2 e0       	ldi	r30, 0x02	; 2
 28c:	f1 e0       	ldi	r31, 0x01	; 1
 28e:	80 81       	ld	r24, Z
 290:	80 64       	ori	r24, 0x40	; 64
 292:	80 83       	st	Z, r24
 294:	05 c0       	rjmp	.+10     	; 0x2a0 <CAN_read_packet+0xee>
			} else {
			HLchan2OFF; // Test?
 296:	e2 e0       	ldi	r30, 0x02	; 2
 298:	f1 e0       	ldi	r31, 0x01	; 1
 29a:	80 81       	ld	r24, Z
 29c:	8f 7b       	andi	r24, 0xBF	; 191
 29e:	80 83       	st	Z, r24
		}
		if (CHECK_BIT(data[0], 7)) { /* Shutdown + On */
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	88 23       	and	r24, r24
 2a4:	14 f4       	brge	.+4      	; 0x2aa <CAN_read_packet+0xf8>
			HC3ON;
 2a6:	74 9a       	sbi	0x0e, 4	; 14
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <CAN_read_packet+0xfa>
			} else {
			HC3OFF;
 2aa:	74 98       	cbi	0x0e, 4	; 14

		/* Byte 4 */

		/* Byte 5 */
	}
}
 2ac:	2d 96       	adiw	r28, 0x0d	; 13
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	f8 94       	cli
 2b2:	de bf       	out	0x3e, r29	; 62
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	cd bf       	out	0x3d, r28	; 61
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <main>:

#define CAN_ID_PDM 0x09000001 /* CAN Bus Identifier for PDM */
#define CHECK_BIT(var,pos) ((var) & (1<<(pos)))

int main(void) {	
    firmware_init();
 2be:	6a df       	rcall	.-300    	; 0x194 <firmware_init>
    sei();

	//Permanently energised boards
	board_init();
 2c0:	78 94       	sei

	
    while(1) {
		/* Wait for CAN interrupts */
		
		CAN_read_packet();
 2c2:	19 df       	rcall	.-462    	; 0xf6 <board_init>
 2c4:	76 df       	rcall	.-276    	; 0x1b2 <CAN_read_packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c6:	2f ef       	ldi	r18, 0xFF	; 255
 2c8:	83 ec       	ldi	r24, 0xC3	; 195
 2ca:	99 e0       	ldi	r25, 0x09	; 9
 2cc:	21 50       	subi	r18, 0x01	; 1
 2ce:	80 40       	sbci	r24, 0x00	; 0
 2d0:	90 40       	sbci	r25, 0x00	; 0
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <main+0xe>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <main+0x18>
 2d6:	00 00       	nop
			//greenON;
			//} else {
			//greenOFF;
		//}
		_delay_ms(200);
		amberOFF;
 2d8:	70 98       	cbi	0x0e, 0	; 14
		greenOFF;
 2da:	71 98       	cbi	0x0e, 1	; 14
 2dc:	2f ef       	ldi	r18, 0xFF	; 255
 2de:	83 ec       	ldi	r24, 0xC3	; 195
 2e0:	99 e0       	ldi	r25, 0x09	; 9
 2e2:	21 50       	subi	r18, 0x01	; 1
 2e4:	80 40       	sbci	r24, 0x00	; 0
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <main+0x24>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <main+0x2e>
 2ec:	00 00       	nop
 2ee:	ea cf       	rjmp	.-44     	; 0x2c4 <main+0x6>

000002f0 <__vector_10>:
 * CAN Packet 1
 * Byte 1													| Byte 2			| Byte 3			| Byte 4			| Byte 5			|
 * 0b  0,     0,     0,     0,     0,      0,     0,      0	| 0b00000000		| 0b00000000		| 0b00000000		| 0b00000000		|
 * SHDN+, SHDN-, Siren, Brake, Fan L, Pump L, Fan R, Pump R	| Fan L PWM 0-100	| Pump L PWM 0-100 	| Fan R PWM 0-100	| Pump R PWM 0-100	|
**/
ISR(PCINT1_vect) {	
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	0b b6       	in	r0, 0x3b	; 59
 2fc:	0f 92       	push	r0
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	4f 93       	push	r20
 304:	5f 93       	push	r21
 306:	6f 93       	push	r22
 308:	7f 93       	push	r23
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25
 30e:	af 93       	push	r26
 310:	bf 93       	push	r27
 312:	ef 93       	push	r30
 314:	ff 93       	push	r31
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	2d 97       	sbiw	r28, 0x0d	; 13
 320:	de bf       	out	0x3e, r29	; 62
 322:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;
	amberON;
 324:	70 9a       	sbi	0x0e, 0	; 14
	CAN_pull_packet(POWER_CAN, &numBytes, data, &ID);
 326:	9e 01       	movw	r18, r28
 328:	27 5f       	subi	r18, 0xF7	; 247
 32a:	3f 4f       	sbci	r19, 0xFF	; 255
 32c:	ae 01       	movw	r20, r28
 32e:	4f 5f       	subi	r20, 0xFF	; 255
 330:	5f 4f       	sbci	r21, 0xFF	; 255
 332:	be 01       	movw	r22, r28
 334:	63 5f       	subi	r22, 0xF3	; 243
 336:	7f 4f       	sbci	r23, 0xFF	; 255
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	87 d1       	rcall	.+782    	; 0x64a <CAN_pull_packet>
	if (ID == CAN_ID_PDM) {
 33c:	89 85       	ldd	r24, Y+9	; 0x09
 33e:	9a 85       	ldd	r25, Y+10	; 0x0a
 340:	ab 85       	ldd	r26, Y+11	; 0x0b
 342:	bc 85       	ldd	r27, Y+12	; 0x0c
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	a1 05       	cpc	r26, r1
 348:	b9 40       	sbci	r27, 0x09	; 9
 34a:	09 f0       	breq	.+2      	; 0x34e <__vector_10+0x5e>
 34c:	5e c0       	rjmp	.+188    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		if(numBytes > 3) {	
 34e:	8d 85       	ldd	r24, Y+13	; 0x0d
 350:	84 30       	cpi	r24, 0x04	; 4
 352:	10 f0       	brcs	.+4      	; 0x358 <__vector_10+0x68>
			greenON;
 354:	71 9a       	sbi	0x0e, 1	; 14
 356:	01 c0       	rjmp	.+2      	; 0x35a <__vector_10+0x6a>
		} else {
			greenOFF;
 358:	71 98       	cbi	0x0e, 1	; 14
		}
		/* Byte 1 */
		if (CHECK_BIT(data[0], 0)) { /* Pump RHS */
 35a:	89 81       	ldd	r24, Y+1	; 0x01
 35c:	80 ff       	sbrs	r24, 0
 35e:	06 c0       	rjmp	.+12     	; 0x36c <__vector_10+0x7c>
			HC4ON;
 360:	e2 e0       	ldi	r30, 0x02	; 2
 362:	f1 e0       	ldi	r31, 0x01	; 1
 364:	80 81       	ld	r24, Z
 366:	80 62       	ori	r24, 0x20	; 32
 368:	80 83       	st	Z, r24
 36a:	05 c0       	rjmp	.+10     	; 0x376 <__vector_10+0x86>
		} else {
			HC4OFF;
 36c:	e2 e0       	ldi	r30, 0x02	; 2
 36e:	f1 e0       	ldi	r31, 0x01	; 1
 370:	80 81       	ld	r24, Z
 372:	8f 7d       	andi	r24, 0xDF	; 223
 374:	80 83       	st	Z, r24
		} 
		if (CHECK_BIT(data[0], 1)) { /* Fan RHS */
 376:	89 81       	ldd	r24, Y+1	; 0x01
 378:	81 ff       	sbrs	r24, 1
 37a:	06 c0       	rjmp	.+12     	; 0x388 <__vector_10+0x98>
			HC5ON;
 37c:	eb e0       	ldi	r30, 0x0B	; 11
 37e:	f1 e0       	ldi	r31, 0x01	; 1
 380:	80 81       	ld	r24, Z
 382:	88 60       	ori	r24, 0x08	; 8
 384:	80 83       	st	Z, r24
 386:	05 c0       	rjmp	.+10     	; 0x392 <__vector_10+0xa2>
		} else {
			HC5OFF;
 388:	eb e0       	ldi	r30, 0x0B	; 11
 38a:	f1 e0       	ldi	r31, 0x01	; 1
 38c:	80 81       	ld	r24, Z
 38e:	87 7f       	andi	r24, 0xF7	; 247
 390:	80 83       	st	Z, r24
		}
		if (CHECK_BIT(data[0], 2)) { /* Pump LHS */
 392:	89 81       	ldd	r24, Y+1	; 0x01
 394:	82 ff       	sbrs	r24, 2
 396:	06 c0       	rjmp	.+12     	; 0x3a4 <__vector_10+0xb4>
			HC6ON;
 398:	eb e0       	ldi	r30, 0x0B	; 11
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	80 81       	ld	r24, Z
 39e:	80 62       	ori	r24, 0x20	; 32
 3a0:	80 83       	st	Z, r24
 3a2:	05 c0       	rjmp	.+10     	; 0x3ae <__vector_10+0xbe>
		} else {
			HC6OFF;
 3a4:	eb e0       	ldi	r30, 0x0B	; 11
 3a6:	f1 e0       	ldi	r31, 0x01	; 1
 3a8:	80 81       	ld	r24, Z
 3aa:	8f 7d       	andi	r24, 0xDF	; 223
 3ac:	80 83       	st	Z, r24
		}
		if (CHECK_BIT(data[0], 3)) { /* Fan LHS */
 3ae:	89 81       	ldd	r24, Y+1	; 0x01
 3b0:	83 ff       	sbrs	r24, 3
 3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <__vector_10+0xd0>
			HC7ON;
 3b4:	e2 e0       	ldi	r30, 0x02	; 2
 3b6:	f1 e0       	ldi	r31, 0x01	; 1
 3b8:	80 81       	ld	r24, Z
 3ba:	88 60       	ori	r24, 0x08	; 8
 3bc:	80 83       	st	Z, r24
 3be:	05 c0       	rjmp	.+10     	; 0x3ca <__vector_10+0xda>
		} else {
			HC7OFF;
 3c0:	e2 e0       	ldi	r30, 0x02	; 2
 3c2:	f1 e0       	ldi	r31, 0x01	; 1
 3c4:	80 81       	ld	r24, Z
 3c6:	87 7f       	andi	r24, 0xF7	; 247
 3c8:	80 83       	st	Z, r24
		}
		if (CHECK_BIT(data[0], 4)) { /* Brake */
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
 3cc:	84 ff       	sbrs	r24, 4
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <__vector_10+0xe4>
			HLchan1ON;
 3d0:	2c 9a       	sbi	0x05, 4	; 5
 3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <__vector_10+0xe6>
		} else {
			HLchan1OFF;
 3d4:	2c 98       	cbi	0x05, 4	; 5
		}
		if (CHECK_BIT(data[0], 5)) {  /* Siren */
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
 3d8:	85 ff       	sbrs	r24, 5
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <__vector_10+0xf0>
			HC9ON;
 3dc:	73 9a       	sbi	0x0e, 3	; 14
 3de:	01 c0       	rjmp	.+2      	; 0x3e2 <__vector_10+0xf2>
		} else {
			HC9OFF;
 3e0:	73 98       	cbi	0x0e, 3	; 14
		}
		if (CHECK_BIT(data[0], 6)) { /* Shutdown - On */
 3e2:	89 81       	ldd	r24, Y+1	; 0x01
 3e4:	86 ff       	sbrs	r24, 6
 3e6:	06 c0       	rjmp	.+12     	; 0x3f4 <__vector_10+0x104>
			HLchan2ON;
 3e8:	e2 e0       	ldi	r30, 0x02	; 2
 3ea:	f1 e0       	ldi	r31, 0x01	; 1
 3ec:	80 81       	ld	r24, Z
 3ee:	80 64       	ori	r24, 0x40	; 64
 3f0:	80 83       	st	Z, r24
 3f2:	05 c0       	rjmp	.+10     	; 0x3fe <__vector_10+0x10e>
		} else {
			HLchan2OFF; // Test?
 3f4:	e2 e0       	ldi	r30, 0x02	; 2
 3f6:	f1 e0       	ldi	r31, 0x01	; 1
 3f8:	80 81       	ld	r24, Z
 3fa:	8f 7b       	andi	r24, 0xBF	; 191
 3fc:	80 83       	st	Z, r24
		}
		if (CHECK_BIT(data[0], 7)) { /* Shutdown + On */
 3fe:	89 81       	ldd	r24, Y+1	; 0x01
 400:	88 23       	and	r24, r24
 402:	14 f4       	brge	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
			HC3ON;
 404:	74 9a       	sbi	0x0e, 4	; 14
 406:	01 c0       	rjmp	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		} else {
			HC3OFF;
 408:	74 98       	cbi	0x0e, 4	; 14

		/* Byte 4 */

		/* Byte 5 */
	}
 40a:	2d 96       	adiw	r28, 0x0d	; 13
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	f8 94       	cli
 410:	de bf       	out	0x3e, r29	; 62
 412:	0f be       	out	0x3f, r0	; 63
 414:	cd bf       	out	0x3d, r28	; 61
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	ff 91       	pop	r31
 41c:	ef 91       	pop	r30
 41e:	bf 91       	pop	r27
 420:	af 91       	pop	r26
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
 426:	7f 91       	pop	r23
 428:	6f 91       	pop	r22
 42a:	5f 91       	pop	r21
 42c:	4f 91       	pop	r20
 42e:	3f 91       	pop	r19
 430:	2f 91       	pop	r18
 432:	0f 90       	pop	r0
 434:	0b be       	out	0x3b, r0	; 59
 436:	0f 90       	pop	r0
 438:	0f be       	out	0x3f, r0	; 63
 43a:	0f 90       	pop	r0
 43c:	1f 90       	pop	r1
 43e:	18 95       	reti

00000440 <MCP2515_CS_low>:
	}
	MCP2515_instruction(CANbus, 128|(1<<((mob>>4) - 3)));		//creates an instruction that matches the mob that is chosen.
	//PORTC &= ~(1<<PINC7);		//Drop the TX
	//_delay_us(50);
	//PORTC |= (1<<PINC7);		
}
 440:	82 30       	cpi	r24, 0x02	; 2
 442:	31 f0       	breq	.+12     	; 0x450 <MCP2515_CS_low+0x10>
 444:	84 30       	cpi	r24, 0x04	; 4
 446:	31 f0       	breq	.+12     	; 0x454 <MCP2515_CS_low+0x14>
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	29 f4       	brne	.+10     	; 0x456 <MCP2515_CS_low+0x16>
 44c:	10 98       	cbi	0x02, 0	; 2
 44e:	08 95       	ret
 450:	10 98       	cbi	0x02, 0	; 2
 452:	08 95       	ret
 454:	10 98       	cbi	0x02, 0	; 2
 456:	08 95       	ret

00000458 <MCP2515_CS_high>:
 458:	82 30       	cpi	r24, 0x02	; 2
 45a:	31 f0       	breq	.+12     	; 0x468 <MCP2515_CS_high+0x10>
 45c:	84 30       	cpi	r24, 0x04	; 4
 45e:	31 f0       	breq	.+12     	; 0x46c <MCP2515_CS_high+0x14>
 460:	81 30       	cpi	r24, 0x01	; 1
 462:	29 f4       	brne	.+10     	; 0x46e <MCP2515_CS_high+0x16>
 464:	10 9a       	sbi	0x02, 0	; 2
 466:	08 95       	ret
 468:	10 9a       	sbi	0x02, 0	; 2
 46a:	08 95       	ret
 46c:	10 9a       	sbi	0x02, 0	; 2
 46e:	08 95       	ret

00000470 <MCP2515_reg_write>:
 470:	1f 93       	push	r17
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	c8 2f       	mov	r28, r24
 478:	16 2f       	mov	r17, r22
 47a:	d4 2f       	mov	r29, r20
 47c:	e1 df       	rcall	.-62     	; 0x440 <MCP2515_CS_low>
 47e:	82 e0       	ldi	r24, 0x02	; 2
 480:	1f d1       	rcall	.+574    	; 0x6c0 <SPI_send_byte>
 482:	81 2f       	mov	r24, r17
 484:	1d d1       	rcall	.+570    	; 0x6c0 <SPI_send_byte>
 486:	8d 2f       	mov	r24, r29
 488:	1b d1       	rcall	.+566    	; 0x6c0 <SPI_send_byte>
 48a:	8c 2f       	mov	r24, r28
 48c:	e5 df       	rcall	.-54     	; 0x458 <MCP2515_CS_high>
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	1f 91       	pop	r17
 494:	08 95       	ret

00000496 <MCP2515_instruction>:
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
 49a:	c8 2f       	mov	r28, r24
 49c:	d6 2f       	mov	r29, r22
 49e:	d0 df       	rcall	.-96     	; 0x440 <MCP2515_CS_low>
 4a0:	8d 2f       	mov	r24, r29
 4a2:	0e d1       	rcall	.+540    	; 0x6c0 <SPI_send_byte>
 4a4:	8c 2f       	mov	r24, r28
 4a6:	d8 df       	rcall	.-80     	; 0x458 <MCP2515_CS_high>
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	08 95       	ret

000004ae <MCP2515_bit_modify>:
 4ae:	0f 93       	push	r16
 4b0:	1f 93       	push	r17
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	c8 2f       	mov	r28, r24
 4b8:	06 2f       	mov	r16, r22
 4ba:	d4 2f       	mov	r29, r20
 4bc:	12 2f       	mov	r17, r18
 4be:	c0 df       	rcall	.-128    	; 0x440 <MCP2515_CS_low>
 4c0:	85 e0       	ldi	r24, 0x05	; 5
 4c2:	fe d0       	rcall	.+508    	; 0x6c0 <SPI_send_byte>
 4c4:	80 2f       	mov	r24, r16
 4c6:	fc d0       	rcall	.+504    	; 0x6c0 <SPI_send_byte>
 4c8:	81 2f       	mov	r24, r17
 4ca:	fa d0       	rcall	.+500    	; 0x6c0 <SPI_send_byte>
 4cc:	8d 2f       	mov	r24, r29
 4ce:	f8 d0       	rcall	.+496    	; 0x6c0 <SPI_send_byte>
 4d0:	8c 2f       	mov	r24, r28
 4d2:	c2 df       	rcall	.-124    	; 0x458 <MCP2515_CS_high>
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	1f 91       	pop	r17
 4da:	0f 91       	pop	r16
 4dc:	08 95       	ret

000004de <MCP2515_init>:
 4de:	cf 93       	push	r28
 4e0:	c8 2f       	mov	r28, r24
 4e2:	60 ec       	ldi	r22, 0xC0	; 192
 4e4:	d8 df       	rcall	.-80     	; 0x496 <MCP2515_instruction>
 4e6:	20 ee       	ldi	r18, 0xE0	; 224
 4e8:	40 e8       	ldi	r20, 0x80	; 128
 4ea:	6f e0       	ldi	r22, 0x0F	; 15
 4ec:	8c 2f       	mov	r24, r28
 4ee:	df df       	rcall	.-66     	; 0x4ae <MCP2515_bit_modify>
 4f0:	44 e0       	ldi	r20, 0x04	; 4
 4f2:	6a e2       	ldi	r22, 0x2A	; 42
 4f4:	8c 2f       	mov	r24, r28
 4f6:	bc df       	rcall	.-136    	; 0x470 <MCP2515_reg_write>
 4f8:	4a ec       	ldi	r20, 0xCA	; 202
 4fa:	69 e2       	ldi	r22, 0x29	; 41
 4fc:	8c 2f       	mov	r24, r28
 4fe:	b8 df       	rcall	.-144    	; 0x470 <MCP2515_reg_write>
 500:	41 e0       	ldi	r20, 0x01	; 1
 502:	68 e2       	ldi	r22, 0x28	; 40
 504:	8c 2f       	mov	r24, r28
 506:	b4 df       	rcall	.-152    	; 0x470 <MCP2515_reg_write>
 508:	43 e0       	ldi	r20, 0x03	; 3
 50a:	6b e2       	ldi	r22, 0x2B	; 43
 50c:	8c 2f       	mov	r24, r28
 50e:	b0 df       	rcall	.-160    	; 0x470 <MCP2515_reg_write>
 510:	41 e0       	ldi	r20, 0x01	; 1
 512:	6d e0       	ldi	r22, 0x0D	; 13
 514:	8c 2f       	mov	r24, r28
 516:	ac df       	rcall	.-168    	; 0x470 <MCP2515_reg_write>
 518:	28 ee       	ldi	r18, 0xE8	; 232
 51a:	48 e0       	ldi	r20, 0x08	; 8
 51c:	6f e0       	ldi	r22, 0x0F	; 15
 51e:	8c 2f       	mov	r24, r28
 520:	c6 df       	rcall	.-116    	; 0x4ae <MCP2515_bit_modify>
 522:	cf 91       	pop	r28
 524:	08 95       	ret

00000526 <MCP2515_PullCanPacket>:
 526:	7f 92       	push	r7
 528:	8f 92       	push	r8
 52a:	9f 92       	push	r9
 52c:	af 92       	push	r10
 52e:	bf 92       	push	r11
 530:	cf 92       	push	r12
 532:	df 92       	push	r13
 534:	ef 92       	push	r14
 536:	ff 92       	push	r15
 538:	0f 93       	push	r16
 53a:	1f 93       	push	r17
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	cd b7       	in	r28, 0x3d	; 61
 542:	de b7       	in	r29, 0x3e	; 62
 544:	2d 97       	sbiw	r28, 0x0d	; 13
 546:	0f b6       	in	r0, 0x3f	; 63
 548:	f8 94       	cli
 54a:	de bf       	out	0x3e, r29	; 62
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	cd bf       	out	0x3d, r28	; 61
 550:	78 2e       	mov	r7, r24
 552:	4a 01       	movw	r8, r20
 554:	59 01       	movw	r10, r18
 556:	61 37       	cpi	r22, 0x71	; 113
 558:	28 f4       	brcc	.+10     	; 0x564 <MCP2515_PullCanPacket+0x3e>
 55a:	0f 2e       	mov	r0, r31
 55c:	f0 e9       	ldi	r31, 0x90	; 144
 55e:	ff 2e       	mov	r15, r31
 560:	f0 2d       	mov	r31, r0
 562:	04 c0       	rjmp	.+8      	; 0x56c <MCP2515_PullCanPacket+0x46>
 564:	0f 2e       	mov	r0, r31
 566:	f4 e9       	ldi	r31, 0x94	; 148
 568:	ff 2e       	mov	r15, r31
 56a:	f0 2d       	mov	r31, r0
 56c:	87 2d       	mov	r24, r7
 56e:	68 df       	rcall	.-304    	; 0x440 <MCP2515_CS_low>
 570:	8f 2d       	mov	r24, r15
 572:	a6 d0       	rcall	.+332    	; 0x6c0 <SPI_send_byte>
 574:	ce 01       	movw	r24, r28
 576:	01 96       	adiw	r24, 0x01	; 1
 578:	7c 01       	movw	r14, r24
 57a:	6e 01       	movw	r12, r28
 57c:	9e e0       	ldi	r25, 0x0E	; 14
 57e:	c9 0e       	add	r12, r25
 580:	d1 1c       	adc	r13, r1
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	9d d0       	rcall	.+314    	; 0x6c0 <SPI_send_byte>
 586:	f7 01       	movw	r30, r14
 588:	81 93       	st	Z+, r24
 58a:	7f 01       	movw	r14, r30
 58c:	ec 15       	cp	r30, r12
 58e:	fd 05       	cpc	r31, r13
 590:	c1 f7       	brne	.-16     	; 0x582 <MCP2515_PullCanPacket+0x5c>
 592:	2a 81       	ldd	r18, Y+2	; 0x02
 594:	89 81       	ldd	r24, Y+1	; 0x01
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	a0 e0       	ldi	r26, 0x00	; 0
 59a:	b0 e0       	ldi	r27, 0x00	; 0
 59c:	07 2e       	mov	r0, r23
 59e:	75 e1       	ldi	r23, 0x15	; 21
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	aa 1f       	adc	r26, r26
 5a6:	bb 1f       	adc	r27, r27
 5a8:	7a 95       	dec	r23
 5aa:	d1 f7       	brne	.-12     	; 0x5a0 <MCP2515_PullCanPacket+0x7a>
 5ac:	70 2d       	mov	r23, r0
 5ae:	3b 81       	ldd	r19, Y+3	; 0x03
 5b0:	93 2b       	or	r25, r19
 5b2:	3c 81       	ldd	r19, Y+4	; 0x04
 5b4:	83 2b       	or	r24, r19
 5b6:	42 2f       	mov	r20, r18
 5b8:	40 7e       	andi	r20, 0xE0	; 224
 5ba:	50 e0       	ldi	r21, 0x00	; 0
 5bc:	60 e0       	ldi	r22, 0x00	; 0
 5be:	70 e0       	ldi	r23, 0x00	; 0
 5c0:	03 2e       	mov	r0, r19
 5c2:	3d e0       	ldi	r19, 0x0D	; 13
 5c4:	44 0f       	add	r20, r20
 5c6:	55 1f       	adc	r21, r21
 5c8:	66 1f       	adc	r22, r22
 5ca:	77 1f       	adc	r23, r23
 5cc:	3a 95       	dec	r19
 5ce:	d1 f7       	brne	.-12     	; 0x5c4 <MCP2515_PullCanPacket+0x9e>
 5d0:	30 2d       	mov	r19, r0
 5d2:	84 2b       	or	r24, r20
 5d4:	95 2b       	or	r25, r21
 5d6:	a6 2b       	or	r26, r22
 5d8:	b7 2b       	or	r27, r23
 5da:	23 70       	andi	r18, 0x03	; 3
 5dc:	a2 2b       	or	r26, r18
 5de:	f8 01       	movw	r30, r16
 5e0:	80 83       	st	Z, r24
 5e2:	91 83       	std	Z+1, r25	; 0x01
 5e4:	a2 83       	std	Z+2, r26	; 0x02
 5e6:	b3 83       	std	Z+3, r27	; 0x03
 5e8:	4d 81       	ldd	r20, Y+5	; 0x05
 5ea:	4f 70       	andi	r20, 0x0F	; 15
 5ec:	f4 01       	movw	r30, r8
 5ee:	40 83       	st	Z, r20
 5f0:	50 e0       	ldi	r21, 0x00	; 0
 5f2:	be 01       	movw	r22, r28
 5f4:	6a 5f       	subi	r22, 0xFA	; 250
 5f6:	7f 4f       	sbci	r23, 0xFF	; 255
 5f8:	c5 01       	movw	r24, r10
 5fa:	6e d0       	rcall	.+220    	; 0x6d8 <memcpy>
 5fc:	87 2d       	mov	r24, r7
 5fe:	2c df       	rcall	.-424    	; 0x458 <MCP2515_CS_high>
 600:	2d 96       	adiw	r28, 0x0d	; 13
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	f8 94       	cli
 606:	de bf       	out	0x3e, r29	; 62
 608:	0f be       	out	0x3f, r0	; 63
 60a:	cd bf       	out	0x3d, r28	; 61
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	0f 91       	pop	r16
 614:	ff 90       	pop	r15
 616:	ef 90       	pop	r14
 618:	df 90       	pop	r13
 61a:	cf 90       	pop	r12
 61c:	bf 90       	pop	r11
 61e:	af 90       	pop	r10
 620:	9f 90       	pop	r9
 622:	8f 90       	pop	r8
 624:	7f 90       	pop	r7
 626:	08 95       	ret

00000628 <MCP2515_check_receive_status>:


uint8_t MCP2515_check_receive_status(uint8_t CANbus)
{
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	c8 2f       	mov	r28, r24
	uint8_t status;
	MCP2515_CS_low(CANbus);			//unset CS so MCP2515 knows we are talking
 62e:	08 df       	rcall	.-496    	; 0x440 <MCP2515_CS_low>
	SPI_send_byte(MCP2515_RXSTATUS);
 630:	80 eb       	ldi	r24, 0xB0	; 176
 632:	46 d0       	rcall	.+140    	; 0x6c0 <SPI_send_byte>
	status = SPI_send_byte(0x00);						//send zeros to get data
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	44 d0       	rcall	.+136    	; 0x6c0 <SPI_send_byte>
 638:	d8 2f       	mov	r29, r24
	SPI_send_byte(0x00);							//MCP2515 will repeat the data output, so send another batch of zeros
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	41 d0       	rcall	.+130    	; 0x6c0 <SPI_send_byte>
	MCP2515_CS_high(CANbus);			//set the CS
 63e:	8c 2f       	mov	r24, r28
 640:	0b df       	rcall	.-490    	; 0x458 <MCP2515_CS_high>
 642:	8d 2f       	mov	r24, r29
	return status;
}
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	08 95       	ret

0000064a <CAN_pull_packet>:
 64a:	af 92       	push	r10
        status                      // SubID?
    );
}

// Serves as a wrapper for the MCP2515_PullCanPacket(..) in MCP2515.h - For more info refer to that.
void CAN_pull_packet(uint8_t CANbus, uint8_t* numBytes, uint8_t* data, uint32_t* ID) {
 64c:	bf 92       	push	r11
 64e:	cf 92       	push	r12
 650:	df 92       	push	r13
 652:	ef 92       	push	r14
 654:	ff 92       	push	r15
 656:	0f 93       	push	r16
 658:	1f 93       	push	r17
 65a:	cf 93       	push	r28
 65c:	c8 2f       	mov	r28, r24
 65e:	7b 01       	movw	r14, r22
 660:	6a 01       	movw	r12, r20
 662:	59 01       	movw	r10, r18
	// Receive the status of the buffers RXB0 and RXB1
	uint8_t status = MCP2515_check_receive_status(CANbus);
 664:	e1 df       	rcall	.-62     	; 0x628 <MCP2515_check_receive_status>
	// Check which receive buffer contains the data (or if both contain) by checking bits 7:6
	switch(status>>6) {
 666:	82 95       	swap	r24
 668:	86 95       	lsr	r24
 66a:	86 95       	lsr	r24
 66c:	83 70       	andi	r24, 0x03	; 3
 66e:	82 30       	cpi	r24, 0x02	; 2
 670:	59 f0       	breq	.+22     	; 0x688 <CAN_pull_packet+0x3e>
 672:	83 30       	cpi	r24, 0x03	; 3
 674:	81 f0       	breq	.+32     	; 0x696 <CAN_pull_packet+0x4c>
 676:	81 30       	cpi	r24, 0x01	; 1
 678:	c9 f4       	brne	.+50     	; 0x6ac <CAN_pull_packet+0x62>
		case 1:	// Message in RXB0		
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
 67a:	85 01       	movw	r16, r10
 67c:	96 01       	movw	r18, r12
 67e:	a7 01       	movw	r20, r14
 680:	61 e6       	ldi	r22, 0x61	; 97
 682:	8c 2f       	mov	r24, r28
 684:	50 df       	rcall	.-352    	; 0x526 <MCP2515_PullCanPacket>
			break;
 686:	12 c0       	rjmp	.+36     	; 0x6ac <CAN_pull_packet+0x62>
		case 2: // Message in RXB1=
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB1SIDH, numBytes, data, ID);
 688:	85 01       	movw	r16, r10
 68a:	96 01       	movw	r18, r12
 68c:	a7 01       	movw	r20, r14
 68e:	61 e7       	ldi	r22, 0x71	; 113
 690:	8c 2f       	mov	r24, r28
 692:	49 df       	rcall	.-366    	; 0x526 <MCP2515_PullCanPacket>
			break;
 694:	0b c0       	rjmp	.+22     	; 0x6ac <CAN_pull_packet+0x62>
		case 3: // Message in both buffers
			//amberON;
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
 696:	85 01       	movw	r16, r10
 698:	96 01       	movw	r18, r12
 69a:	a7 01       	movw	r20, r14
 69c:	61 e6       	ldi	r22, 0x61	; 97
 69e:	8c 2f       	mov	r24, r28
 6a0:	42 df       	rcall	.-380    	; 0x526 <MCP2515_PullCanPacket>
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB1SIDH, numBytes, data, ID);
 6a2:	96 01       	movw	r18, r12
 6a4:	a7 01       	movw	r20, r14
 6a6:	61 e7       	ldi	r22, 0x71	; 113
 6a8:	8c 2f       	mov	r24, r28
 6aa:	3d df       	rcall	.-390    	; 0x526 <MCP2515_PullCanPacket>
			break;
		default:
			break;
	}
}
 6ac:	cf 91       	pop	r28
 6ae:	1f 91       	pop	r17
 6b0:	0f 91       	pop	r16
 6b2:	ff 90       	pop	r15
 6b4:	ef 90       	pop	r14
 6b6:	df 90       	pop	r13
 6b8:	cf 90       	pop	r12
 6ba:	bf 90       	pop	r11
 6bc:	af 90       	pop	r10
 6be:	08 95       	ret

000006c0 <SPI_send_byte>:
#include "SPI.h"

uint8_t SPI_send_byte(uint8_t c)
{
	SPDR = c;					//write data to the transmission register. Writing to this initiates transmission.
 6c0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 6c2:	0d b4       	in	r0, 0x2d	; 45
 6c4:	07 fe       	sbrs	r0, 7
 6c6:	fd cf       	rjmp	.-6      	; 0x6c2 <SPI_send_byte+0x2>
	return SPDR;				//return any data that was shifted into this register upon transmission.
 6c8:	8e b5       	in	r24, 0x2e	; 46
}
 6ca:	08 95       	ret

000006cc <SPI_init>:

void SPI_init()
{
	//MCUCR &= ~(1<<SPIPS);		//make sure we are getting spi not on the _A spi pins.
	SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(1<<SPR0)|(0<<SPR1);  //set interrupt, enable SPI, MSB mode, set as master, low is idle, read on leading edge, Set to speed(fosc/64) SPR0=1, SPR1=0
 6cc:	81 e5       	ldi	r24, 0x51	; 81
 6ce:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X);	//set whether we want 2x speed or not (1=2x speed).
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	8d bd       	out	0x2d, r24	; 45
	SPDR = 0x00;		//ensure data register has nothing in it
 6d4:	1e bc       	out	0x2e, r1	; 46
 6d6:	08 95       	ret

000006d8 <memcpy>:
 6d8:	fb 01       	movw	r30, r22
 6da:	dc 01       	movw	r26, r24
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <memcpy+0xa>
 6de:	01 90       	ld	r0, Z+
 6e0:	0d 92       	st	X+, r0
 6e2:	41 50       	subi	r20, 0x01	; 1
 6e4:	50 40       	sbci	r21, 0x00	; 0
 6e6:	d8 f7       	brcc	.-10     	; 0x6de <memcpy+0x6>
 6e8:	08 95       	ret

000006ea <_exit>:
 6ea:	f8 94       	cli

000006ec <__stop_program>:
 6ec:	ff cf       	rjmp	.-2      	; 0x6ec <__stop_program>
