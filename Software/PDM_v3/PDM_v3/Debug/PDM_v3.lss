
PDM_v3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000054e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000054e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f7e  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ef3  00000000  00000000  0000265e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b06  00000000  00000000  00003551  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000424  00000000  00000000  00004058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000795  00000000  00000000  0000447c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000118c  00000000  00000000  00004c11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00005d9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	77 c0       	rjmp	.+238    	; 0xf4 <__bad_interrupt>
   6:	00 00       	nop
   8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
   a:	00 00       	nop
   c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
   e:	00 00       	nop
  10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
  12:	00 00       	nop
  14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
  16:	00 00       	nop
  18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
  22:	00 00       	nop
  24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
  26:	00 00       	nop
  28:	c7 c0       	rjmp	.+398    	; 0x1b8 <__vector_10>
  2a:	00 00       	nop
  2c:	63 c0       	rjmp	.+198    	; 0xf4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	61 c0       	rjmp	.+194    	; 0xf4 <__bad_interrupt>
  32:	00 00       	nop
  34:	5f c0       	rjmp	.+190    	; 0xf4 <__bad_interrupt>
  36:	00 00       	nop
  38:	5d c0       	rjmp	.+186    	; 0xf4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5b c0       	rjmp	.+182    	; 0xf4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	59 c0       	rjmp	.+178    	; 0xf4 <__bad_interrupt>
  42:	00 00       	nop
  44:	57 c0       	rjmp	.+174    	; 0xf4 <__bad_interrupt>
  46:	00 00       	nop
  48:	55 c0       	rjmp	.+170    	; 0xf4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	53 c0       	rjmp	.+166    	; 0xf4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	51 c0       	rjmp	.+162    	; 0xf4 <__bad_interrupt>
  52:	00 00       	nop
  54:	4f c0       	rjmp	.+158    	; 0xf4 <__bad_interrupt>
  56:	00 00       	nop
  58:	4d c0       	rjmp	.+154    	; 0xf4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4b c0       	rjmp	.+150    	; 0xf4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	49 c0       	rjmp	.+146    	; 0xf4 <__bad_interrupt>
  62:	00 00       	nop
  64:	47 c0       	rjmp	.+142    	; 0xf4 <__bad_interrupt>
  66:	00 00       	nop
  68:	45 c0       	rjmp	.+138    	; 0xf4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	43 c0       	rjmp	.+134    	; 0xf4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	41 c0       	rjmp	.+130    	; 0xf4 <__bad_interrupt>
  72:	00 00       	nop
  74:	3f c0       	rjmp	.+126    	; 0xf4 <__bad_interrupt>
  76:	00 00       	nop
  78:	3d c0       	rjmp	.+122    	; 0xf4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3b c0       	rjmp	.+118    	; 0xf4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	39 c0       	rjmp	.+114    	; 0xf4 <__bad_interrupt>
  82:	00 00       	nop
  84:	37 c0       	rjmp	.+110    	; 0xf4 <__bad_interrupt>
  86:	00 00       	nop
  88:	35 c0       	rjmp	.+106    	; 0xf4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	33 c0       	rjmp	.+102    	; 0xf4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	31 c0       	rjmp	.+98     	; 0xf4 <__bad_interrupt>
  92:	00 00       	nop
  94:	2f c0       	rjmp	.+94     	; 0xf4 <__bad_interrupt>
  96:	00 00       	nop
  98:	2d c0       	rjmp	.+90     	; 0xf4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2b c0       	rjmp	.+86     	; 0xf4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	29 c0       	rjmp	.+82     	; 0xf4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	27 c0       	rjmp	.+78     	; 0xf4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	25 c0       	rjmp	.+74     	; 0xf4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	23 c0       	rjmp	.+70     	; 0xf4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	21 c0       	rjmp	.+66     	; 0xf4 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	1f c0       	rjmp	.+62     	; 0xf4 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1d c0       	rjmp	.+58     	; 0xf4 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1b c0       	rjmp	.+54     	; 0xf4 <__bad_interrupt>
  be:	00 00       	nop
  c0:	19 c0       	rjmp	.+50     	; 0xf4 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	17 c0       	rjmp	.+46     	; 0xf4 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	15 c0       	rjmp	.+42     	; 0xf4 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	13 c0       	rjmp	.+38     	; 0xf4 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	11 c0       	rjmp	.+34     	; 0xf4 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	0f c0       	rjmp	.+30     	; 0xf4 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0d c0       	rjmp	.+26     	; 0xf4 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0b c0       	rjmp	.+22     	; 0xf4 <__bad_interrupt>
  de:	00 00       	nop
  e0:	09 c0       	rjmp	.+18     	; 0xf4 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	3a d0       	rcall	.+116    	; 0x166 <main>
  f2:	01 c2       	rjmp	.+1026   	; 0x4f6 <_exit>

000000f4 <__bad_interrupt>:
  f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <io_init>:
 * Reference: ATmega Datasheet Chapter 13 (I/O-Ports)
 * 
 */
void io_init(void)
{
	DDRA |= 0b00000001;		//PA0 - CAN_SS // chip select
  f6:	08 9a       	sbi	0x01, 0	; 1
	DDRB |= 0b10010110;		//PB7 PWM13; PB4 PWM10; PB2 MOSI; PB1 SCK
  f8:	84 b1       	in	r24, 0x04	; 4
  fa:	86 69       	ori	r24, 0x96	; 150
  fc:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0b00000000;		//nil
  fe:	8a b1       	in	r24, 0x0a	; 10
 100:	8a b9       	out	0x0a, r24	; 10
	DDRE |= 0b00111011;		//PE5 PWM2; PE4 PWM1; PE3 PWM9; PE1 greenLED; PE0 amberLED
 102:	8d b1       	in	r24, 0x0d	; 13
 104:	8b 63       	ori	r24, 0x3B	; 59
 106:	8d b9       	out	0x0d, r24	; 13
	DDRG |= 0b00100011;		//PG5 PWM12; PG1 HL34enable; PG0 HL34disable
 108:	83 b3       	in	r24, 0x13	; 19
 10a:	83 62       	ori	r24, 0x23	; 35
 10c:	83 bb       	out	0x13, r24	; 19
	DDRH |= 0b01111000;		//PH6 PWM11; PH5 PWM4; PH3 PWM3; PH2 PWM7
 10e:	e1 e0       	ldi	r30, 0x01	; 1
 110:	f1 e0       	ldi	r31, 0x01	; 1
 112:	80 81       	ld	r24, Z
 114:	88 67       	ori	r24, 0x78	; 120
 116:	80 83       	st	Z, r24
	DDRJ |= 0b00011000;		//PJ4 HL12disable; PJ3 HL12enable
 118:	e4 e0       	ldi	r30, 0x04	; 4
 11a:	f1 e0       	ldi	r31, 0x01	; 1
 11c:	80 81       	ld	r24, Z
 11e:	88 61       	ori	r24, 0x18	; 24
 120:	80 83       	st	Z, r24
	DDRL |= 0b00111000;		//PL3 PWM6; PL2 PWM8; PL1 PWM5
 122:	ea e0       	ldi	r30, 0x0A	; 10
 124:	f1 e0       	ldi	r31, 0x01	; 1
 126:	80 81       	ld	r24, Z
 128:	88 63       	ori	r24, 0x38	; 56
 12a:	80 83       	st	Z, r24
	
	PORTA &= ~0b00000001;	//CAN_SS off
 12c:	10 98       	cbi	0x02, 0	; 2
	PORTB &= ~0b10010110;	//PWMs off; MOSI off
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	89 76       	andi	r24, 0x69	; 105
 132:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~0b11000000;	//HL34enable off; HL34disable on
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 73       	andi	r24, 0x3F	; 63
 138:	8b b9       	out	0x0b, r24	; 11
	PORTE &= ~0b00111110;	//3 x PWMs off; LEDs off
 13a:	8e b1       	in	r24, 0x0e	; 14
 13c:	81 7c       	andi	r24, 0xC1	; 193
 13e:	8e b9       	out	0x0e, r24	; 14
	PORTG &= ~0b00100011;	//PWM12 off
 140:	84 b3       	in	r24, 0x14	; 20
 142:	8c 7d       	andi	r24, 0xDC	; 220
 144:	84 bb       	out	0x14, r24	; 20
	PORTH &= ~0b01111000;	//4 x PWMs off; HL34disable on; HL34enable off
 146:	e2 e0       	ldi	r30, 0x02	; 2
 148:	f1 e0       	ldi	r31, 0x01	; 1
 14a:	80 81       	ld	r24, Z
 14c:	87 78       	andi	r24, 0x87	; 135
 14e:	80 83       	st	Z, r24
	PORTJ &= ~0b00011000;	//HL12disable on; HL12enable off
 150:	e5 e0       	ldi	r30, 0x05	; 5
 152:	f1 e0       	ldi	r31, 0x01	; 1
 154:	80 81       	ld	r24, Z
 156:	87 7e       	andi	r24, 0xE7	; 231
 158:	80 83       	st	Z, r24
	PORTL &= ~0b00111000;	//3 x PWMs off
 15a:	eb e0       	ldi	r30, 0x0B	; 11
 15c:	f1 e0       	ldi	r31, 0x01	; 1
 15e:	80 81       	ld	r24, Z
 160:	87 7c       	andi	r24, 0xC7	; 199
 162:	80 83       	st	Z, r24
 164:	08 95       	ret

00000166 <main>:

int main(void)
{
	
	
    io_init();
 166:	c7 df       	rcall	.-114    	; 0xf6 <io_init>
	
    PCICR |= (1<<PCIE1); // Turning on PCIE1 bit in PCICR register
 168:	e8 e6       	ldi	r30, 0x68	; 104
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	82 60       	ori	r24, 0x02	; 2
 170:	80 83       	st	Z, r24
    PCMSK1 |= (1<<PCINT15); // Turning on the PCINT15 bit in PCMSK1 register
 172:	ec e6       	ldi	r30, 0x6C	; 108
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	80 68       	ori	r24, 0x80	; 128

    SPI_init();
 17a:	80 83       	st	Z, r24
    // Init CAN
    MCP2515_init(POWER_CAN);
 17c:	ad d1       	rcall	.+858    	; 0x4d8 <SPI_init>
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	b4 d0       	rcall	.+360    	; 0x2ea <MCP2515_init>
    sei();
 182:	78 94       	sei
	
	
	
	//greenON;
	HL12enableON;
 184:	e5 e0       	ldi	r30, 0x05	; 5
 186:	f1 e0       	ldi	r31, 0x01	; 1
 188:	80 81       	ld	r24, Z
 18a:	88 60       	ori	r24, 0x08	; 8
 18c:	80 83       	st	Z, r24
	HL34enableON;
 18e:	a1 9a       	sbi	0x14, 1	; 20
	
	HC1ON;			//chassis controller power on
 190:	e2 e0       	ldi	r30, 0x02	; 2
 192:	f1 e0       	ldi	r31, 0x01	; 1
 194:	80 81       	ld	r24, Z
 196:	80 61       	ori	r24, 0x10	; 16
 198:	80 83       	st	Z, r24
	HC2ON;			//BMS power on
 19a:	75 9a       	sbi	0x0e, 5	; 14
	HC3ON;			//shutdown positive on
 19c:	74 9a       	sbi	0x0e, 4	; 14
	HLchan2OFF;		//shutdown negative on
 19e:	80 81       	ld	r24, Z
 1a0:	8f 7b       	andi	r24, 0xBF	; 191
 1a2:	80 83       	st	Z, r24
	HLchan4ON;		//inverter power on
 1a4:	2f 9a       	sbi	0x05, 7	; 5
	HC8ON;			//steering wheel and radio power on
 1a6:	ab e0       	ldi	r26, 0x0B	; 11
 1a8:	b1 e0       	ldi	r27, 0x01	; 1
 1aa:	8c 91       	ld	r24, X
 1ac:	80 61       	ori	r24, 0x10	; 16
 1ae:	8c 93       	st	X, r24
	
	//HC5ON;		// Fan RHS -- current testbench
	HC4ON;			// Pump RHS -- currently on testbench
 1b0:	80 81       	ld	r24, Z
 1b2:	80 62       	ori	r24, 0x20	; 32
 1b4:	80 83       	st	Z, r24
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <main+0x50>

000001b8 <__vector_10>:

/**
 * @brief Called whenever CANBUS interrupt is triggered
 *        * When ever there is data waiting on CAN
 */
ISR(PCINT1_vect) {	
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	0b b6       	in	r0, 0x3b	; 59
 1c4:	0f 92       	push	r0
 1c6:	2f 93       	push	r18
 1c8:	3f 93       	push	r19
 1ca:	4f 93       	push	r20
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	2d 97       	sbiw	r28, 0x0d	; 13
 1e8:	de bf       	out	0x3e, r29	; 62
 1ea:	cd bf       	out	0x3d, r28	; 61
	
	greenON;
 1ec:	71 9a       	sbi	0x0e, 1	; 14
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;
	
	CAN_pull_packet(POWER_CAN, &numBytes, data, &ID);
 1ee:	9e 01       	movw	r18, r28
 1f0:	27 5f       	subi	r18, 0xF7	; 247
 1f2:	3f 4f       	sbci	r19, 0xFF	; 255
 1f4:	ae 01       	movw	r20, r28
 1f6:	4f 5f       	subi	r20, 0xFF	; 255
 1f8:	5f 4f       	sbci	r21, 0xFF	; 255
 1fa:	be 01       	movw	r22, r28
 1fc:	63 5f       	subi	r22, 0xF3	; 243
 1fe:	7f 4f       	sbci	r23, 0xFF	; 255
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	29 d1       	rcall	.+594    	; 0x456 <CAN_pull_packet>
	if (ID == 0x09000001) {
 204:	89 85       	ldd	r24, Y+9	; 0x09
 206:	9a 85       	ldd	r25, Y+10	; 0x0a
 208:	ab 85       	ldd	r26, Y+11	; 0x0b
 20a:	bc 85       	ldd	r27, Y+12	; 0x0c
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	a1 05       	cpc	r26, r1
 210:	b9 40       	sbci	r27, 0x09	; 9
 212:	09 f4       	brne	.+2      	; 0x216 <__vector_10+0x5e>
		amberON;
 214:	70 9a       	sbi	0x0e, 0	; 14
	}
	//if (data[0] == 0xEF) {
		//HLchan1ON;
	//}
 216:	2d 96       	adiw	r28, 0x0d	; 13
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	f8 94       	cli
 21c:	de bf       	out	0x3e, r29	; 62
 21e:	0f be       	out	0x3f, r0	; 63
 220:	cd bf       	out	0x3d, r28	; 61
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	7f 91       	pop	r23
 234:	6f 91       	pop	r22
 236:	5f 91       	pop	r21
 238:	4f 91       	pop	r20
 23a:	3f 91       	pop	r19
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0b be       	out	0x3b, r0	; 59
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <MCP2515_CS_low>:
	}
	MCP2515_instruction(CANbus, 128|(1<<((mob>>4) - 3)));		//creates an instruction that matches the mob that is chosen.
	//PORTC &= ~(1<<PINC7);		//Drop the TX
	//_delay_us(50);
	//PORTC |= (1<<PINC7);		
}
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	31 f0       	breq	.+12     	; 0x25c <MCP2515_CS_low+0x10>
 250:	84 30       	cpi	r24, 0x04	; 4
 252:	31 f0       	breq	.+12     	; 0x260 <MCP2515_CS_low+0x14>
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	29 f4       	brne	.+10     	; 0x262 <MCP2515_CS_low+0x16>
 258:	10 98       	cbi	0x02, 0	; 2
 25a:	08 95       	ret
 25c:	10 98       	cbi	0x02, 0	; 2
 25e:	08 95       	ret
 260:	10 98       	cbi	0x02, 0	; 2
 262:	08 95       	ret

00000264 <MCP2515_CS_high>:
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	31 f0       	breq	.+12     	; 0x274 <MCP2515_CS_high+0x10>
 268:	84 30       	cpi	r24, 0x04	; 4
 26a:	31 f0       	breq	.+12     	; 0x278 <MCP2515_CS_high+0x14>
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	29 f4       	brne	.+10     	; 0x27a <MCP2515_CS_high+0x16>
 270:	10 9a       	sbi	0x02, 0	; 2
 272:	08 95       	ret
 274:	10 9a       	sbi	0x02, 0	; 2
 276:	08 95       	ret
 278:	10 9a       	sbi	0x02, 0	; 2
 27a:	08 95       	ret

0000027c <MCP2515_reg_write>:
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	c8 2f       	mov	r28, r24
 284:	16 2f       	mov	r17, r22
 286:	d4 2f       	mov	r29, r20
 288:	e1 df       	rcall	.-62     	; 0x24c <MCP2515_CS_low>
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	1f d1       	rcall	.+574    	; 0x4cc <SPI_send_byte>
 28e:	81 2f       	mov	r24, r17
 290:	1d d1       	rcall	.+570    	; 0x4cc <SPI_send_byte>
 292:	8d 2f       	mov	r24, r29
 294:	1b d1       	rcall	.+566    	; 0x4cc <SPI_send_byte>
 296:	8c 2f       	mov	r24, r28
 298:	e5 df       	rcall	.-54     	; 0x264 <MCP2515_CS_high>
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	08 95       	ret

000002a2 <MCP2515_instruction>:
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	c8 2f       	mov	r28, r24
 2a8:	d6 2f       	mov	r29, r22
 2aa:	d0 df       	rcall	.-96     	; 0x24c <MCP2515_CS_low>
 2ac:	8d 2f       	mov	r24, r29
 2ae:	0e d1       	rcall	.+540    	; 0x4cc <SPI_send_byte>
 2b0:	8c 2f       	mov	r24, r28
 2b2:	d8 df       	rcall	.-80     	; 0x264 <MCP2515_CS_high>
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <MCP2515_bit_modify>:
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	c8 2f       	mov	r28, r24
 2c4:	06 2f       	mov	r16, r22
 2c6:	d4 2f       	mov	r29, r20
 2c8:	12 2f       	mov	r17, r18
 2ca:	c0 df       	rcall	.-128    	; 0x24c <MCP2515_CS_low>
 2cc:	85 e0       	ldi	r24, 0x05	; 5
 2ce:	fe d0       	rcall	.+508    	; 0x4cc <SPI_send_byte>
 2d0:	80 2f       	mov	r24, r16
 2d2:	fc d0       	rcall	.+504    	; 0x4cc <SPI_send_byte>
 2d4:	81 2f       	mov	r24, r17
 2d6:	fa d0       	rcall	.+500    	; 0x4cc <SPI_send_byte>
 2d8:	8d 2f       	mov	r24, r29
 2da:	f8 d0       	rcall	.+496    	; 0x4cc <SPI_send_byte>
 2dc:	8c 2f       	mov	r24, r28
 2de:	c2 df       	rcall	.-124    	; 0x264 <MCP2515_CS_high>
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	08 95       	ret

000002ea <MCP2515_init>:
 2ea:	cf 93       	push	r28
 2ec:	c8 2f       	mov	r28, r24
 2ee:	60 ec       	ldi	r22, 0xC0	; 192
 2f0:	d8 df       	rcall	.-80     	; 0x2a2 <MCP2515_instruction>
 2f2:	20 ee       	ldi	r18, 0xE0	; 224
 2f4:	40 e8       	ldi	r20, 0x80	; 128
 2f6:	6f e0       	ldi	r22, 0x0F	; 15
 2f8:	8c 2f       	mov	r24, r28
 2fa:	df df       	rcall	.-66     	; 0x2ba <MCP2515_bit_modify>
 2fc:	44 e0       	ldi	r20, 0x04	; 4
 2fe:	6a e2       	ldi	r22, 0x2A	; 42
 300:	8c 2f       	mov	r24, r28
 302:	bc df       	rcall	.-136    	; 0x27c <MCP2515_reg_write>
 304:	4a ec       	ldi	r20, 0xCA	; 202
 306:	69 e2       	ldi	r22, 0x29	; 41
 308:	8c 2f       	mov	r24, r28
 30a:	b8 df       	rcall	.-144    	; 0x27c <MCP2515_reg_write>
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	68 e2       	ldi	r22, 0x28	; 40
 310:	8c 2f       	mov	r24, r28
 312:	b4 df       	rcall	.-152    	; 0x27c <MCP2515_reg_write>
 314:	43 e0       	ldi	r20, 0x03	; 3
 316:	6b e2       	ldi	r22, 0x2B	; 43
 318:	8c 2f       	mov	r24, r28
 31a:	b0 df       	rcall	.-160    	; 0x27c <MCP2515_reg_write>
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	6d e0       	ldi	r22, 0x0D	; 13
 320:	8c 2f       	mov	r24, r28
 322:	ac df       	rcall	.-168    	; 0x27c <MCP2515_reg_write>
 324:	28 ee       	ldi	r18, 0xE8	; 232
 326:	48 e0       	ldi	r20, 0x08	; 8
 328:	6f e0       	ldi	r22, 0x0F	; 15
 32a:	8c 2f       	mov	r24, r28
 32c:	c6 df       	rcall	.-116    	; 0x2ba <MCP2515_bit_modify>
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <MCP2515_PullCanPacket>:
 332:	7f 92       	push	r7
 334:	8f 92       	push	r8
 336:	9f 92       	push	r9
 338:	af 92       	push	r10
 33a:	bf 92       	push	r11
 33c:	cf 92       	push	r12
 33e:	df 92       	push	r13
 340:	ef 92       	push	r14
 342:	ff 92       	push	r15
 344:	0f 93       	push	r16
 346:	1f 93       	push	r17
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	cd b7       	in	r28, 0x3d	; 61
 34e:	de b7       	in	r29, 0x3e	; 62
 350:	2d 97       	sbiw	r28, 0x0d	; 13
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	f8 94       	cli
 356:	de bf       	out	0x3e, r29	; 62
 358:	0f be       	out	0x3f, r0	; 63
 35a:	cd bf       	out	0x3d, r28	; 61
 35c:	78 2e       	mov	r7, r24
 35e:	4a 01       	movw	r8, r20
 360:	59 01       	movw	r10, r18
 362:	61 37       	cpi	r22, 0x71	; 113
 364:	28 f4       	brcc	.+10     	; 0x370 <MCP2515_PullCanPacket+0x3e>
 366:	0f 2e       	mov	r0, r31
 368:	f0 e9       	ldi	r31, 0x90	; 144
 36a:	ff 2e       	mov	r15, r31
 36c:	f0 2d       	mov	r31, r0
 36e:	04 c0       	rjmp	.+8      	; 0x378 <MCP2515_PullCanPacket+0x46>
 370:	0f 2e       	mov	r0, r31
 372:	f4 e9       	ldi	r31, 0x94	; 148
 374:	ff 2e       	mov	r15, r31
 376:	f0 2d       	mov	r31, r0
 378:	87 2d       	mov	r24, r7
 37a:	68 df       	rcall	.-304    	; 0x24c <MCP2515_CS_low>
 37c:	8f 2d       	mov	r24, r15
 37e:	a6 d0       	rcall	.+332    	; 0x4cc <SPI_send_byte>
 380:	ce 01       	movw	r24, r28
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	7c 01       	movw	r14, r24
 386:	6e 01       	movw	r12, r28
 388:	9e e0       	ldi	r25, 0x0E	; 14
 38a:	c9 0e       	add	r12, r25
 38c:	d1 1c       	adc	r13, r1
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	9d d0       	rcall	.+314    	; 0x4cc <SPI_send_byte>
 392:	f7 01       	movw	r30, r14
 394:	81 93       	st	Z+, r24
 396:	7f 01       	movw	r14, r30
 398:	ec 15       	cp	r30, r12
 39a:	fd 05       	cpc	r31, r13
 39c:	c1 f7       	brne	.-16     	; 0x38e <MCP2515_PullCanPacket+0x5c>
 39e:	2a 81       	ldd	r18, Y+2	; 0x02
 3a0:	89 81       	ldd	r24, Y+1	; 0x01
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	a0 e0       	ldi	r26, 0x00	; 0
 3a6:	b0 e0       	ldi	r27, 0x00	; 0
 3a8:	07 2e       	mov	r0, r23
 3aa:	75 e1       	ldi	r23, 0x15	; 21
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	aa 1f       	adc	r26, r26
 3b2:	bb 1f       	adc	r27, r27
 3b4:	7a 95       	dec	r23
 3b6:	d1 f7       	brne	.-12     	; 0x3ac <MCP2515_PullCanPacket+0x7a>
 3b8:	70 2d       	mov	r23, r0
 3ba:	3b 81       	ldd	r19, Y+3	; 0x03
 3bc:	93 2b       	or	r25, r19
 3be:	3c 81       	ldd	r19, Y+4	; 0x04
 3c0:	83 2b       	or	r24, r19
 3c2:	42 2f       	mov	r20, r18
 3c4:	40 7e       	andi	r20, 0xE0	; 224
 3c6:	50 e0       	ldi	r21, 0x00	; 0
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	03 2e       	mov	r0, r19
 3ce:	3d e0       	ldi	r19, 0x0D	; 13
 3d0:	44 0f       	add	r20, r20
 3d2:	55 1f       	adc	r21, r21
 3d4:	66 1f       	adc	r22, r22
 3d6:	77 1f       	adc	r23, r23
 3d8:	3a 95       	dec	r19
 3da:	d1 f7       	brne	.-12     	; 0x3d0 <MCP2515_PullCanPacket+0x9e>
 3dc:	30 2d       	mov	r19, r0
 3de:	84 2b       	or	r24, r20
 3e0:	95 2b       	or	r25, r21
 3e2:	a6 2b       	or	r26, r22
 3e4:	b7 2b       	or	r27, r23
 3e6:	23 70       	andi	r18, 0x03	; 3
 3e8:	a2 2b       	or	r26, r18
 3ea:	f8 01       	movw	r30, r16
 3ec:	80 83       	st	Z, r24
 3ee:	91 83       	std	Z+1, r25	; 0x01
 3f0:	a2 83       	std	Z+2, r26	; 0x02
 3f2:	b3 83       	std	Z+3, r27	; 0x03
 3f4:	4d 85       	ldd	r20, Y+13	; 0x0d
 3f6:	4f 70       	andi	r20, 0x0F	; 15
 3f8:	f4 01       	movw	r30, r8
 3fa:	40 83       	st	Z, r20
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	be 01       	movw	r22, r28
 400:	6b 5f       	subi	r22, 0xFB	; 251
 402:	7f 4f       	sbci	r23, 0xFF	; 255
 404:	c5 01       	movw	r24, r10
 406:	6e d0       	rcall	.+220    	; 0x4e4 <memcpy>
 408:	87 2d       	mov	r24, r7
 40a:	2c df       	rcall	.-424    	; 0x264 <MCP2515_CS_high>
 40c:	2d 96       	adiw	r28, 0x0d	; 13
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	f8 94       	cli
 412:	de bf       	out	0x3e, r29	; 62
 414:	0f be       	out	0x3f, r0	; 63
 416:	cd bf       	out	0x3d, r28	; 61
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	1f 91       	pop	r17
 41e:	0f 91       	pop	r16
 420:	ff 90       	pop	r15
 422:	ef 90       	pop	r14
 424:	df 90       	pop	r13
 426:	cf 90       	pop	r12
 428:	bf 90       	pop	r11
 42a:	af 90       	pop	r10
 42c:	9f 90       	pop	r9
 42e:	8f 90       	pop	r8
 430:	7f 90       	pop	r7
 432:	08 95       	ret

00000434 <MCP2515_check_receive_status>:


uint8_t MCP2515_check_receive_status(uint8_t CANbus)
{
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	c8 2f       	mov	r28, r24
	uint8_t status;
	MCP2515_CS_low(CANbus);			//unset CS so MCP2515 knows we are talking
 43a:	08 df       	rcall	.-496    	; 0x24c <MCP2515_CS_low>
	SPI_send_byte(MCP2515_RXSTATUS);
 43c:	80 eb       	ldi	r24, 0xB0	; 176
 43e:	46 d0       	rcall	.+140    	; 0x4cc <SPI_send_byte>
	status = SPI_send_byte(0x00);						//send zeros to get data
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	44 d0       	rcall	.+136    	; 0x4cc <SPI_send_byte>
 444:	d8 2f       	mov	r29, r24
	SPI_send_byte(0x00);							//MCP2515 will repeat the data output, so send another batch of zeros
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	41 d0       	rcall	.+130    	; 0x4cc <SPI_send_byte>
	MCP2515_CS_high(CANbus);			//set the CS
 44a:	8c 2f       	mov	r24, r28
 44c:	0b df       	rcall	.-490    	; 0x264 <MCP2515_CS_high>
 44e:	8d 2f       	mov	r24, r29
	return status;
}
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <CAN_pull_packet>:
 456:	af 92       	push	r10
        status                      // SubID?
    );
}

// Serves as a wrapper for the MCP2515_PullCanPacket(..) in MCP2515.h - For more info refer to that.
void CAN_pull_packet(uint8_t CANbus, uint8_t* numBytes, uint8_t* data, uint32_t* ID) {
 458:	bf 92       	push	r11
 45a:	cf 92       	push	r12
 45c:	df 92       	push	r13
 45e:	ef 92       	push	r14
 460:	ff 92       	push	r15
 462:	0f 93       	push	r16
 464:	1f 93       	push	r17
 466:	cf 93       	push	r28
 468:	c8 2f       	mov	r28, r24
 46a:	7b 01       	movw	r14, r22
 46c:	6a 01       	movw	r12, r20
 46e:	59 01       	movw	r10, r18
	// Receive the status of the buffers RXB0 and RXB1
	uint8_t status = MCP2515_check_receive_status(CANbus);
 470:	e1 df       	rcall	.-62     	; 0x434 <MCP2515_check_receive_status>
	// Check which receive buffer contains the data (or if both contain) by checking bits 7:6
	switch(status>>6) {
 472:	82 95       	swap	r24
 474:	86 95       	lsr	r24
 476:	86 95       	lsr	r24
 478:	83 70       	andi	r24, 0x03	; 3
 47a:	82 30       	cpi	r24, 0x02	; 2
 47c:	59 f0       	breq	.+22     	; 0x494 <CAN_pull_packet+0x3e>
 47e:	83 30       	cpi	r24, 0x03	; 3
 480:	81 f0       	breq	.+32     	; 0x4a2 <CAN_pull_packet+0x4c>
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	c9 f4       	brne	.+50     	; 0x4b8 <CAN_pull_packet+0x62>
		case 1:	// Message in RXB0
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
 486:	85 01       	movw	r16, r10
 488:	96 01       	movw	r18, r12
 48a:	a7 01       	movw	r20, r14
 48c:	61 e6       	ldi	r22, 0x61	; 97
 48e:	8c 2f       	mov	r24, r28
 490:	50 df       	rcall	.-352    	; 0x332 <MCP2515_PullCanPacket>
			break;
 492:	12 c0       	rjmp	.+36     	; 0x4b8 <CAN_pull_packet+0x62>
		case 2: // Message in RXB1=
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB1SIDH, numBytes, data, ID);
 494:	85 01       	movw	r16, r10
 496:	96 01       	movw	r18, r12
 498:	a7 01       	movw	r20, r14
 49a:	61 e7       	ldi	r22, 0x71	; 113
 49c:	8c 2f       	mov	r24, r28
 49e:	49 df       	rcall	.-366    	; 0x332 <MCP2515_PullCanPacket>
			break;
 4a0:	0b c0       	rjmp	.+22     	; 0x4b8 <CAN_pull_packet+0x62>
		case 3: // Message in both buffers
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
 4a2:	85 01       	movw	r16, r10
 4a4:	96 01       	movw	r18, r12
 4a6:	a7 01       	movw	r20, r14
 4a8:	61 e6       	ldi	r22, 0x61	; 97
 4aa:	8c 2f       	mov	r24, r28
 4ac:	42 df       	rcall	.-380    	; 0x332 <MCP2515_PullCanPacket>
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB1SIDH, numBytes, data, ID);
 4ae:	96 01       	movw	r18, r12
 4b0:	a7 01       	movw	r20, r14
 4b2:	61 e7       	ldi	r22, 0x71	; 113
 4b4:	8c 2f       	mov	r24, r28
 4b6:	3d df       	rcall	.-390    	; 0x332 <MCP2515_PullCanPacket>
			break;
		default:
			break;
	}
}
 4b8:	cf 91       	pop	r28
 4ba:	1f 91       	pop	r17
 4bc:	0f 91       	pop	r16
 4be:	ff 90       	pop	r15
 4c0:	ef 90       	pop	r14
 4c2:	df 90       	pop	r13
 4c4:	cf 90       	pop	r12
 4c6:	bf 90       	pop	r11
 4c8:	af 90       	pop	r10
 4ca:	08 95       	ret

000004cc <SPI_send_byte>:
#include "SPI.h"

uint8_t SPI_send_byte(uint8_t c)
{
	SPDR = c;					//write data to the transmission register. Writing to this initiates transmission.
 4cc:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 4ce:	0d b4       	in	r0, 0x2d	; 45
 4d0:	07 fe       	sbrs	r0, 7
 4d2:	fd cf       	rjmp	.-6      	; 0x4ce <SPI_send_byte+0x2>
	return SPDR;				//return any data that was shifted into this register upon transmission.
 4d4:	8e b5       	in	r24, 0x2e	; 46
}
 4d6:	08 95       	ret

000004d8 <SPI_init>:

void SPI_init()
{
	//MCUCR &= ~(1<<SPIPS);		//make sure we are getting spi not on the _A spi pins.
	SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(1<<SPR0)|(0<<SPR1);  //set interrupt, enable SPI, MSB mode, set as master, low is idle, read on leading edge, Set to speed(fosc/64) SPR0=1, SPR1=0
 4d8:	81 e5       	ldi	r24, 0x51	; 81
 4da:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X);	//set whether we want 2x speed or not (1=2x speed).
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	8d bd       	out	0x2d, r24	; 45
	SPDR = 0x00;		//ensure data register has nothing in it
 4e0:	1e bc       	out	0x2e, r1	; 46
 4e2:	08 95       	ret

000004e4 <memcpy>:
 4e4:	fb 01       	movw	r30, r22
 4e6:	dc 01       	movw	r26, r24
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <memcpy+0xa>
 4ea:	01 90       	ld	r0, Z+
 4ec:	0d 92       	st	X+, r0
 4ee:	41 50       	subi	r20, 0x01	; 1
 4f0:	50 40       	sbci	r21, 0x00	; 0
 4f2:	d8 f7       	brcc	.-10     	; 0x4ea <memcpy+0x6>
 4f4:	08 95       	ret

000004f6 <_exit>:
 4f6:	f8 94       	cli

000004f8 <__stop_program>:
 4f8:	ff cf       	rjmp	.-2      	; 0x4f8 <__stop_program>
