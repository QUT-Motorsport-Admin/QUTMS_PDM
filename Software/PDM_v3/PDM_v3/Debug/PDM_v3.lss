
PDM_v3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000532  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000586  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002057  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f64  00000000  00000000  00002777  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b9d  00000000  00000000  000036db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000434  00000000  00000000  00004278  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007e2  00000000  00000000  000046ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012a6  00000000  00000000  00004e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00006134  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	77 c0       	rjmp	.+238    	; 0xf4 <__bad_interrupt>
   6:	00 00       	nop
   8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
   a:	00 00       	nop
   c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
   e:	00 00       	nop
  10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
  12:	00 00       	nop
  14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
  16:	00 00       	nop
  18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
  22:	00 00       	nop
  24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
  26:	00 00       	nop
  28:	c5 c0       	rjmp	.+394    	; 0x1b4 <__vector_10>
  2a:	00 00       	nop
  2c:	63 c0       	rjmp	.+198    	; 0xf4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	61 c0       	rjmp	.+194    	; 0xf4 <__bad_interrupt>
  32:	00 00       	nop
  34:	5f c0       	rjmp	.+190    	; 0xf4 <__bad_interrupt>
  36:	00 00       	nop
  38:	5d c0       	rjmp	.+186    	; 0xf4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5b c0       	rjmp	.+182    	; 0xf4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	59 c0       	rjmp	.+178    	; 0xf4 <__bad_interrupt>
  42:	00 00       	nop
  44:	57 c0       	rjmp	.+174    	; 0xf4 <__bad_interrupt>
  46:	00 00       	nop
  48:	55 c0       	rjmp	.+170    	; 0xf4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	53 c0       	rjmp	.+166    	; 0xf4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	51 c0       	rjmp	.+162    	; 0xf4 <__bad_interrupt>
  52:	00 00       	nop
  54:	4f c0       	rjmp	.+158    	; 0xf4 <__bad_interrupt>
  56:	00 00       	nop
  58:	4d c0       	rjmp	.+154    	; 0xf4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4b c0       	rjmp	.+150    	; 0xf4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	49 c0       	rjmp	.+146    	; 0xf4 <__bad_interrupt>
  62:	00 00       	nop
  64:	47 c0       	rjmp	.+142    	; 0xf4 <__bad_interrupt>
  66:	00 00       	nop
  68:	45 c0       	rjmp	.+138    	; 0xf4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	43 c0       	rjmp	.+134    	; 0xf4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	41 c0       	rjmp	.+130    	; 0xf4 <__bad_interrupt>
  72:	00 00       	nop
  74:	3f c0       	rjmp	.+126    	; 0xf4 <__bad_interrupt>
  76:	00 00       	nop
  78:	3d c0       	rjmp	.+122    	; 0xf4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3b c0       	rjmp	.+118    	; 0xf4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	39 c0       	rjmp	.+114    	; 0xf4 <__bad_interrupt>
  82:	00 00       	nop
  84:	37 c0       	rjmp	.+110    	; 0xf4 <__bad_interrupt>
  86:	00 00       	nop
  88:	35 c0       	rjmp	.+106    	; 0xf4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	33 c0       	rjmp	.+102    	; 0xf4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	31 c0       	rjmp	.+98     	; 0xf4 <__bad_interrupt>
  92:	00 00       	nop
  94:	2f c0       	rjmp	.+94     	; 0xf4 <__bad_interrupt>
  96:	00 00       	nop
  98:	2d c0       	rjmp	.+90     	; 0xf4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2b c0       	rjmp	.+86     	; 0xf4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	29 c0       	rjmp	.+82     	; 0xf4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	27 c0       	rjmp	.+78     	; 0xf4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	25 c0       	rjmp	.+74     	; 0xf4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	23 c0       	rjmp	.+70     	; 0xf4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	21 c0       	rjmp	.+66     	; 0xf4 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	1f c0       	rjmp	.+62     	; 0xf4 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1d c0       	rjmp	.+58     	; 0xf4 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1b c0       	rjmp	.+54     	; 0xf4 <__bad_interrupt>
  be:	00 00       	nop
  c0:	19 c0       	rjmp	.+50     	; 0xf4 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	17 c0       	rjmp	.+46     	; 0xf4 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	15 c0       	rjmp	.+42     	; 0xf4 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	13 c0       	rjmp	.+38     	; 0xf4 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	11 c0       	rjmp	.+34     	; 0xf4 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	0f c0       	rjmp	.+30     	; 0xf4 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0d c0       	rjmp	.+26     	; 0xf4 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0b c0       	rjmp	.+22     	; 0xf4 <__bad_interrupt>
  de:	00 00       	nop
  e0:	09 c0       	rjmp	.+18     	; 0xf4 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	45 d0       	rcall	.+138    	; 0x17c <main>
  f2:	1d c2       	rjmp	.+1082   	; 0x52e <_exit>

000000f4 <__bad_interrupt>:
  f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <io_init>:
 * Reference: ATmega Datasheet Chapter 13 (I/O-Ports)
 * 
 */
void io_init(void)
{
	DDRA |= 0b00000001;		//PA0 - CAN_SS
  f6:	08 9a       	sbi	0x01, 0	; 1
	DDRB |= 0b10010110;		//PB7 PWM13; PB4 PWM10; PB2 MOSI; PB1 SCK
  f8:	84 b1       	in	r24, 0x04	; 4
  fa:	86 69       	ori	r24, 0x96	; 150
  fc:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0b00000000;		//nil
  fe:	8a b1       	in	r24, 0x0a	; 10
 100:	8a b9       	out	0x0a, r24	; 10
	DDRE |= 0b00111011;		//PE5 PWM2; PE4 PWM1; PE3 PWM9; PE1 greenLED; PE0 amberLED
 102:	8d b1       	in	r24, 0x0d	; 13
 104:	8b 63       	ori	r24, 0x3B	; 59
 106:	8d b9       	out	0x0d, r24	; 13
	DDRG |= 0b00100011;		//PG5 PWM12; PG1 HL34enable; PG0 HL34disable
 108:	83 b3       	in	r24, 0x13	; 19
 10a:	83 62       	ori	r24, 0x23	; 35
 10c:	83 bb       	out	0x13, r24	; 19
	DDRH |= 0b01111000;		//PH6 PWM11; PH5 PWM4; PH3 PWM3; PH2 PWM7
 10e:	e1 e0       	ldi	r30, 0x01	; 1
 110:	f1 e0       	ldi	r31, 0x01	; 1
 112:	80 81       	ld	r24, Z
 114:	88 67       	ori	r24, 0x78	; 120
 116:	80 83       	st	Z, r24
	DDRJ |= 0b01011000;		//PJ4 HL12disable; PJ3 HL12enable
 118:	e4 e0       	ldi	r30, 0x04	; 4
 11a:	f1 e0       	ldi	r31, 0x01	; 1
 11c:	80 81       	ld	r24, Z
 11e:	88 65       	ori	r24, 0x58	; 88
 120:	80 83       	st	Z, r24
	DDRL |= 0b00111000;		//PL3 PWM6; PL2 PWM8; PL1 PWM5
 122:	ea e0       	ldi	r30, 0x0A	; 10
 124:	f1 e0       	ldi	r31, 0x01	; 1
 126:	80 81       	ld	r24, Z
 128:	88 63       	ori	r24, 0x38	; 56
 12a:	80 83       	st	Z, r24
	
	PORTA &= ~0b00000001;	//CAN_SS off
 12c:	10 98       	cbi	0x02, 0	; 2
	PORTB &= ~0b10010110;	//PWMs off; MOSI off
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	89 76       	andi	r24, 0x69	; 105
 132:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~0b11000000;	//HL34enable off; HL34disable on
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 73       	andi	r24, 0x3F	; 63
 138:	8b b9       	out	0x0b, r24	; 11
	PORTE &= ~0b00111110;	//3 x PWMs off; LEDs off
 13a:	8e b1       	in	r24, 0x0e	; 14
 13c:	81 7c       	andi	r24, 0xC1	; 193
 13e:	8e b9       	out	0x0e, r24	; 14
	PORTG &= ~0b00100011;	//PWM12 off
 140:	84 b3       	in	r24, 0x14	; 20
 142:	8c 7d       	andi	r24, 0xDC	; 220
 144:	84 bb       	out	0x14, r24	; 20
	PORTH &= ~0b01111000;	//4 x PWMs off; HL34disable on; HL34enable off
 146:	e2 e0       	ldi	r30, 0x02	; 2
 148:	f1 e0       	ldi	r31, 0x01	; 1
 14a:	80 81       	ld	r24, Z
 14c:	87 78       	andi	r24, 0x87	; 135
 14e:	80 83       	st	Z, r24
	PORTJ &= ~0b01011000;	//HL12disable on; HL12enable off
 150:	e5 e0       	ldi	r30, 0x05	; 5
 152:	f1 e0       	ldi	r31, 0x01	; 1
 154:	80 81       	ld	r24, Z
 156:	87 7a       	andi	r24, 0xA7	; 167
 158:	80 83       	st	Z, r24
	PORTL &= ~0b00111000;	//3 x PWMs off
 15a:	eb e0       	ldi	r30, 0x0B	; 11
 15c:	f1 e0       	ldi	r31, 0x01	; 1
 15e:	80 81       	ld	r24, Z
 160:	87 7c       	andi	r24, 0xC7	; 199
 162:	80 83       	st	Z, r24
 164:	08 95       	ret

00000166 <firmware_init>:
/**
 * @brief Set up all devices in the ATmega and MCP2515. Initiates structs to hold data from other devices
 * 
 */
 void firmware_init() {
	io_init();
 166:	c7 df       	rcall	.-114    	; 0xf6 <io_init>
	PCMSK1 = 0b10000000; // Turning on the PCINT15 bit in PCMSK1 register
 168:	80 e8       	ldi	r24, 0x80	; 128
 16a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	// Enable interrupts for PCINT15
	// PCICR = (1<<PCIE1);
	PCICR = 0b00000010; // Turning on PCIE1 bit in PCICR register
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	// PCMSK1 = (1<<PCINT15);
	//PCMSK1 = 0b10000000; // Turning on the PCINT15 bit in PCMSK1 register

	SPI_init();
	// Init CAN
	MCP2515_init(POWER_CAN);
 174:	cd d1       	rcall	.+922    	; 0x510 <SPI_init>
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	d4 c0       	rjmp	.+424    	; 0x322 <MCP2515_init>
 17a:	08 95       	ret

0000017c <main>:
#include "pdmCAN.h"
#include "MCP2515.h"

int main(void)
{
    firmware_init();
 17c:	f4 df       	rcall	.-24     	; 0x166 <firmware_init>
	//greenON;
	HL12enableON;
 17e:	e5 e0       	ldi	r30, 0x05	; 5
 180:	f1 e0       	ldi	r31, 0x01	; 1
 182:	80 81       	ld	r24, Z
 184:	88 60       	ori	r24, 0x08	; 8
 186:	80 83       	st	Z, r24
	HL34enableON;
 188:	a1 9a       	sbi	0x14, 1	; 20
	HC1ON;			//chassis controller power on
 18a:	e2 e0       	ldi	r30, 0x02	; 2
 18c:	f1 e0       	ldi	r31, 0x01	; 1
 18e:	80 81       	ld	r24, Z
 190:	80 61       	ori	r24, 0x10	; 16
 192:	80 83       	st	Z, r24
	HC2ON;			//BMS power on
 194:	75 9a       	sbi	0x0e, 5	; 14
	HC3ON;			//shutdown positive on
 196:	74 9a       	sbi	0x0e, 4	; 14
	HLchan2OFF;		//shutdown negative on
 198:	80 81       	ld	r24, Z
 19a:	8f 7b       	andi	r24, 0xBF	; 191
 19c:	80 83       	st	Z, r24
	HLchan4ON;		//inverter power on
 19e:	2f 9a       	sbi	0x05, 7	; 5
	HC8ON;			//steering wheel and radio power on
 1a0:	ab e0       	ldi	r26, 0x0B	; 11
 1a2:	b1 e0       	ldi	r27, 0x01	; 1
 1a4:	8c 91       	ld	r24, X
 1a6:	80 61       	ori	r24, 0x10	; 16
 1a8:	8c 93       	st	X, r24
	//HC5ON;		// Fan RHS -- current testbench
	HC4ON;			// Pump RHS -- currently on testbench
 1aa:	80 81       	ld	r24, Z
 1ac:	80 62       	ori	r24, 0x20	; 32
 1ae:	80 83       	st	Z, r24
	//HC7ON;		// Fan LHS
	//HC6ON;		// Pump LHS
	//HLchan1ON;		// Break Light

	sei();
 1b0:	78 94       	sei
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <main+0x36>

000001b4 <__vector_10>:

/**
 * @brief Called whenever CANBUS interrupt is triggered
 *        * When ever there is data waiting on CAN
 */
ISR(PCINT1_vect) {	
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	0b b6       	in	r0, 0x3b	; 59
 1c0:	0f 92       	push	r0
 1c2:	2f 93       	push	r18
 1c4:	3f 93       	push	r19
 1c6:	4f 93       	push	r20
 1c8:	5f 93       	push	r21
 1ca:	6f 93       	push	r22
 1cc:	7f 93       	push	r23
 1ce:	8f 93       	push	r24
 1d0:	9f 93       	push	r25
 1d2:	af 93       	push	r26
 1d4:	bf 93       	push	r27
 1d6:	ef 93       	push	r30
 1d8:	ff 93       	push	r31
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
 1e2:	2d 97       	sbiw	r28, 0x0d	; 13
 1e4:	de bf       	out	0x3e, r29	; 62
 1e6:	cd bf       	out	0x3d, r28	; 61
	greenON;
 1e8:	71 9a       	sbi	0x0e, 1	; 14
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;

	CAN_pull_packet(POWER_CAN, &numBytes, data, &ID);
 1ea:	9e 01       	movw	r18, r28
 1ec:	27 5f       	subi	r18, 0xF7	; 247
 1ee:	3f 4f       	sbci	r19, 0xFF	; 255
 1f0:	ae 01       	movw	r20, r28
 1f2:	4f 5f       	subi	r20, 0xFF	; 255
 1f4:	5f 4f       	sbci	r21, 0xFF	; 255
 1f6:	be 01       	movw	r22, r28
 1f8:	63 5f       	subi	r22, 0xF3	; 243
 1fa:	7f 4f       	sbci	r23, 0xFF	; 255
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	47 d1       	rcall	.+654    	; 0x48e <CAN_pull_packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	2f ef       	ldi	r18, 0xFF	; 255
 202:	89 e6       	ldi	r24, 0x69	; 105
 204:	98 e1       	ldi	r25, 0x18	; 24
 206:	21 50       	subi	r18, 0x01	; 1
 208:	80 40       	sbci	r24, 0x00	; 0
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <__vector_10+0x52>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <__vector_10+0x5c>
 210:	00 00       	nop
	}
	if (CHECK_BIT(data[0], 5)) {
		//HLchan1ON;
		//amberON;
	}
	if (data[3] == 1) {
 212:	8c 81       	ldd	r24, Y+4	; 0x04
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	09 f4       	brne	.+2      	; 0x21a <__vector_10+0x66>
		//HLchan1ON;
		amberON;
 218:	70 9a       	sbi	0x0e, 0	; 14
 21a:	2f ef       	ldi	r18, 0xFF	; 255
 21c:	89 e6       	ldi	r24, 0x69	; 105
 21e:	98 e1       	ldi	r25, 0x18	; 24
 220:	21 50       	subi	r18, 0x01	; 1
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <__vector_10+0x6c>
 228:	00 c0       	rjmp	.+0      	; 0x22a <__vector_10+0x76>
 22a:	00 00       	nop
	}
	_delay_ms(500);
	//HLchan1OFF;
	amberOFF;
 22c:	70 98       	cbi	0x0e, 0	; 14
}
 22e:	2d 96       	adiw	r28, 0x0d	; 13
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	7f 91       	pop	r23
 24c:	6f 91       	pop	r22
 24e:	5f 91       	pop	r21
 250:	4f 91       	pop	r20
 252:	3f 91       	pop	r19
 254:	2f 91       	pop	r18
 256:	0f 90       	pop	r0
 258:	0b be       	out	0x3b, r0	; 59
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <MCP2515_CS_low>:
	}
	MCP2515_instruction(CANbus, 128|(1<<((mob>>4) - 3)));		//creates an instruction that matches the mob that is chosen.
	//PORTC &= ~(1<<PINC7);		//Drop the TX
	//_delay_us(50);
	//PORTC |= (1<<PINC7);		
}
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	51 f0       	breq	.+20     	; 0x27c <MCP2515_CS_low+0x18>
 268:	84 30       	cpi	r24, 0x04	; 4
 26a:	71 f0       	breq	.+28     	; 0x288 <MCP2515_CS_low+0x24>
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	69 f4       	brne	.+26     	; 0x28a <MCP2515_CS_low+0x26>
 270:	e2 e0       	ldi	r30, 0x02	; 2
 272:	f1 e0       	ldi	r31, 0x01	; 1
 274:	80 81       	ld	r24, Z
 276:	8e 7f       	andi	r24, 0xFE	; 254
 278:	80 83       	st	Z, r24
 27a:	08 95       	ret
 27c:	e5 e0       	ldi	r30, 0x05	; 5
 27e:	f1 e0       	ldi	r31, 0x01	; 1
 280:	80 81       	ld	r24, Z
 282:	8f 7b       	andi	r24, 0xBF	; 191
 284:	80 83       	st	Z, r24
 286:	08 95       	ret
 288:	28 98       	cbi	0x05, 0	; 5
 28a:	08 95       	ret

0000028c <MCP2515_CS_high>:
 28c:	82 30       	cpi	r24, 0x02	; 2
 28e:	51 f0       	breq	.+20     	; 0x2a4 <MCP2515_CS_high+0x18>
 290:	84 30       	cpi	r24, 0x04	; 4
 292:	71 f0       	breq	.+28     	; 0x2b0 <MCP2515_CS_high+0x24>
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	69 f4       	brne	.+26     	; 0x2b2 <MCP2515_CS_high+0x26>
 298:	e2 e0       	ldi	r30, 0x02	; 2
 29a:	f1 e0       	ldi	r31, 0x01	; 1
 29c:	80 81       	ld	r24, Z
 29e:	81 60       	ori	r24, 0x01	; 1
 2a0:	80 83       	st	Z, r24
 2a2:	08 95       	ret
 2a4:	e5 e0       	ldi	r30, 0x05	; 5
 2a6:	f1 e0       	ldi	r31, 0x01	; 1
 2a8:	80 81       	ld	r24, Z
 2aa:	80 64       	ori	r24, 0x40	; 64
 2ac:	80 83       	st	Z, r24
 2ae:	08 95       	ret
 2b0:	28 9a       	sbi	0x05, 0	; 5
 2b2:	08 95       	ret

000002b4 <MCP2515_reg_write>:
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	c8 2f       	mov	r28, r24
 2bc:	16 2f       	mov	r17, r22
 2be:	d4 2f       	mov	r29, r20
 2c0:	d1 df       	rcall	.-94     	; 0x264 <MCP2515_CS_low>
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	1f d1       	rcall	.+574    	; 0x504 <SPI_send_byte>
 2c6:	81 2f       	mov	r24, r17
 2c8:	1d d1       	rcall	.+570    	; 0x504 <SPI_send_byte>
 2ca:	8d 2f       	mov	r24, r29
 2cc:	1b d1       	rcall	.+566    	; 0x504 <SPI_send_byte>
 2ce:	8c 2f       	mov	r24, r28
 2d0:	dd df       	rcall	.-70     	; 0x28c <MCP2515_CS_high>
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	08 95       	ret

000002da <MCP2515_instruction>:
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	c8 2f       	mov	r28, r24
 2e0:	d6 2f       	mov	r29, r22
 2e2:	c0 df       	rcall	.-128    	; 0x264 <MCP2515_CS_low>
 2e4:	8d 2f       	mov	r24, r29
 2e6:	0e d1       	rcall	.+540    	; 0x504 <SPI_send_byte>
 2e8:	8c 2f       	mov	r24, r28
 2ea:	d0 df       	rcall	.-96     	; 0x28c <MCP2515_CS_high>
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <MCP2515_bit_modify>:
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	c8 2f       	mov	r28, r24
 2fc:	06 2f       	mov	r16, r22
 2fe:	d4 2f       	mov	r29, r20
 300:	12 2f       	mov	r17, r18
 302:	b0 df       	rcall	.-160    	; 0x264 <MCP2515_CS_low>
 304:	85 e0       	ldi	r24, 0x05	; 5
 306:	fe d0       	rcall	.+508    	; 0x504 <SPI_send_byte>
 308:	80 2f       	mov	r24, r16
 30a:	fc d0       	rcall	.+504    	; 0x504 <SPI_send_byte>
 30c:	81 2f       	mov	r24, r17
 30e:	fa d0       	rcall	.+500    	; 0x504 <SPI_send_byte>
 310:	8d 2f       	mov	r24, r29
 312:	f8 d0       	rcall	.+496    	; 0x504 <SPI_send_byte>
 314:	8c 2f       	mov	r24, r28
 316:	ba df       	rcall	.-140    	; 0x28c <MCP2515_CS_high>
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	08 95       	ret

00000322 <MCP2515_init>:
 322:	cf 93       	push	r28
 324:	c8 2f       	mov	r28, r24
 326:	60 ec       	ldi	r22, 0xC0	; 192
 328:	d8 df       	rcall	.-80     	; 0x2da <MCP2515_instruction>
 32a:	20 ee       	ldi	r18, 0xE0	; 224
 32c:	40 e8       	ldi	r20, 0x80	; 128
 32e:	6f e0       	ldi	r22, 0x0F	; 15
 330:	8c 2f       	mov	r24, r28
 332:	df df       	rcall	.-66     	; 0x2f2 <MCP2515_bit_modify>
 334:	44 e0       	ldi	r20, 0x04	; 4
 336:	6a e2       	ldi	r22, 0x2A	; 42
 338:	8c 2f       	mov	r24, r28
 33a:	bc df       	rcall	.-136    	; 0x2b4 <MCP2515_reg_write>
 33c:	4a ec       	ldi	r20, 0xCA	; 202
 33e:	69 e2       	ldi	r22, 0x29	; 41
 340:	8c 2f       	mov	r24, r28
 342:	b8 df       	rcall	.-144    	; 0x2b4 <MCP2515_reg_write>
 344:	41 e0       	ldi	r20, 0x01	; 1
 346:	68 e2       	ldi	r22, 0x28	; 40
 348:	8c 2f       	mov	r24, r28
 34a:	b4 df       	rcall	.-152    	; 0x2b4 <MCP2515_reg_write>
 34c:	43 e0       	ldi	r20, 0x03	; 3
 34e:	6b e2       	ldi	r22, 0x2B	; 43
 350:	8c 2f       	mov	r24, r28
 352:	b0 df       	rcall	.-160    	; 0x2b4 <MCP2515_reg_write>
 354:	41 e0       	ldi	r20, 0x01	; 1
 356:	6d e0       	ldi	r22, 0x0D	; 13
 358:	8c 2f       	mov	r24, r28
 35a:	ac df       	rcall	.-168    	; 0x2b4 <MCP2515_reg_write>
 35c:	28 ee       	ldi	r18, 0xE8	; 232
 35e:	48 e0       	ldi	r20, 0x08	; 8
 360:	6f e0       	ldi	r22, 0x0F	; 15
 362:	8c 2f       	mov	r24, r28
 364:	c6 df       	rcall	.-116    	; 0x2f2 <MCP2515_bit_modify>
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <MCP2515_PullCanPacket>:
 36a:	7f 92       	push	r7
 36c:	8f 92       	push	r8
 36e:	9f 92       	push	r9
 370:	af 92       	push	r10
 372:	bf 92       	push	r11
 374:	cf 92       	push	r12
 376:	df 92       	push	r13
 378:	ef 92       	push	r14
 37a:	ff 92       	push	r15
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
 388:	2d 97       	sbiw	r28, 0x0d	; 13
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	f8 94       	cli
 38e:	de bf       	out	0x3e, r29	; 62
 390:	0f be       	out	0x3f, r0	; 63
 392:	cd bf       	out	0x3d, r28	; 61
 394:	78 2e       	mov	r7, r24
 396:	4a 01       	movw	r8, r20
 398:	59 01       	movw	r10, r18
 39a:	61 37       	cpi	r22, 0x71	; 113
 39c:	28 f4       	brcc	.+10     	; 0x3a8 <MCP2515_PullCanPacket+0x3e>
 39e:	0f 2e       	mov	r0, r31
 3a0:	f0 e9       	ldi	r31, 0x90	; 144
 3a2:	ff 2e       	mov	r15, r31
 3a4:	f0 2d       	mov	r31, r0
 3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <MCP2515_PullCanPacket+0x46>
 3a8:	0f 2e       	mov	r0, r31
 3aa:	f4 e9       	ldi	r31, 0x94	; 148
 3ac:	ff 2e       	mov	r15, r31
 3ae:	f0 2d       	mov	r31, r0
 3b0:	87 2d       	mov	r24, r7
 3b2:	58 df       	rcall	.-336    	; 0x264 <MCP2515_CS_low>
 3b4:	8f 2d       	mov	r24, r15
 3b6:	a6 d0       	rcall	.+332    	; 0x504 <SPI_send_byte>
 3b8:	ce 01       	movw	r24, r28
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	7c 01       	movw	r14, r24
 3be:	6e 01       	movw	r12, r28
 3c0:	9e e0       	ldi	r25, 0x0E	; 14
 3c2:	c9 0e       	add	r12, r25
 3c4:	d1 1c       	adc	r13, r1
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	9d d0       	rcall	.+314    	; 0x504 <SPI_send_byte>
 3ca:	f7 01       	movw	r30, r14
 3cc:	81 93       	st	Z+, r24
 3ce:	7f 01       	movw	r14, r30
 3d0:	ec 15       	cp	r30, r12
 3d2:	fd 05       	cpc	r31, r13
 3d4:	c1 f7       	brne	.-16     	; 0x3c6 <MCP2515_PullCanPacket+0x5c>
 3d6:	2a 81       	ldd	r18, Y+2	; 0x02
 3d8:	89 81       	ldd	r24, Y+1	; 0x01
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	a0 e0       	ldi	r26, 0x00	; 0
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	07 2e       	mov	r0, r23
 3e2:	75 e1       	ldi	r23, 0x15	; 21
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	aa 1f       	adc	r26, r26
 3ea:	bb 1f       	adc	r27, r27
 3ec:	7a 95       	dec	r23
 3ee:	d1 f7       	brne	.-12     	; 0x3e4 <MCP2515_PullCanPacket+0x7a>
 3f0:	70 2d       	mov	r23, r0
 3f2:	3b 81       	ldd	r19, Y+3	; 0x03
 3f4:	93 2b       	or	r25, r19
 3f6:	3c 81       	ldd	r19, Y+4	; 0x04
 3f8:	83 2b       	or	r24, r19
 3fa:	42 2f       	mov	r20, r18
 3fc:	40 7e       	andi	r20, 0xE0	; 224
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	03 2e       	mov	r0, r19
 406:	3d e0       	ldi	r19, 0x0D	; 13
 408:	44 0f       	add	r20, r20
 40a:	55 1f       	adc	r21, r21
 40c:	66 1f       	adc	r22, r22
 40e:	77 1f       	adc	r23, r23
 410:	3a 95       	dec	r19
 412:	d1 f7       	brne	.-12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 414:	30 2d       	mov	r19, r0
 416:	84 2b       	or	r24, r20
 418:	95 2b       	or	r25, r21
 41a:	a6 2b       	or	r26, r22
 41c:	b7 2b       	or	r27, r23
 41e:	23 70       	andi	r18, 0x03	; 3
 420:	a2 2b       	or	r26, r18
 422:	f8 01       	movw	r30, r16
 424:	80 83       	st	Z, r24
 426:	91 83       	std	Z+1, r25	; 0x01
 428:	a2 83       	std	Z+2, r26	; 0x02
 42a:	b3 83       	std	Z+3, r27	; 0x03
 42c:	4d 85       	ldd	r20, Y+13	; 0x0d
 42e:	4f 70       	andi	r20, 0x0F	; 15
 430:	f4 01       	movw	r30, r8
 432:	40 83       	st	Z, r20
 434:	50 e0       	ldi	r21, 0x00	; 0
 436:	be 01       	movw	r22, r28
 438:	6b 5f       	subi	r22, 0xFB	; 251
 43a:	7f 4f       	sbci	r23, 0xFF	; 255
 43c:	c5 01       	movw	r24, r10
 43e:	6e d0       	rcall	.+220    	; 0x51c <memcpy>
 440:	87 2d       	mov	r24, r7
 442:	24 df       	rcall	.-440    	; 0x28c <MCP2515_CS_high>
 444:	2d 96       	adiw	r28, 0x0d	; 13
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	f8 94       	cli
 44a:	de bf       	out	0x3e, r29	; 62
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	cd bf       	out	0x3d, r28	; 61
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	ff 90       	pop	r15
 45a:	ef 90       	pop	r14
 45c:	df 90       	pop	r13
 45e:	cf 90       	pop	r12
 460:	bf 90       	pop	r11
 462:	af 90       	pop	r10
 464:	9f 90       	pop	r9
 466:	8f 90       	pop	r8
 468:	7f 90       	pop	r7
 46a:	08 95       	ret

0000046c <MCP2515_check_receive_status>:


uint8_t MCP2515_check_receive_status(uint8_t CANbus)
{
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	c8 2f       	mov	r28, r24
	uint8_t status;
	MCP2515_CS_low(CANbus);			//unset CS so MCP2515 knows we are talking
 472:	f8 de       	rcall	.-528    	; 0x264 <MCP2515_CS_low>
	SPI_send_byte(MCP2515_RXSTATUS);
 474:	80 eb       	ldi	r24, 0xB0	; 176
 476:	46 d0       	rcall	.+140    	; 0x504 <SPI_send_byte>
	status = SPI_send_byte(0x00);						//send zeros to get data
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	44 d0       	rcall	.+136    	; 0x504 <SPI_send_byte>
 47c:	d8 2f       	mov	r29, r24
	SPI_send_byte(0x00);							//MCP2515 will repeat the data output, so send another batch of zeros
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	41 d0       	rcall	.+130    	; 0x504 <SPI_send_byte>
	MCP2515_CS_high(CANbus);			//set the CS
 482:	8c 2f       	mov	r24, r28
 484:	03 df       	rcall	.-506    	; 0x28c <MCP2515_CS_high>
 486:	8d 2f       	mov	r24, r29
	return status;
}
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	08 95       	ret

0000048e <CAN_pull_packet>:
 48e:	af 92       	push	r10
        status                      // SubID?
    );
}

// Serves as a wrapper for the MCP2515_PullCanPacket(..) in MCP2515.h - For more info refer to that.
void CAN_pull_packet(uint8_t CANbus, uint8_t* numBytes, uint8_t* data, uint32_t* ID) {
 490:	bf 92       	push	r11
 492:	cf 92       	push	r12
 494:	df 92       	push	r13
 496:	ef 92       	push	r14
 498:	ff 92       	push	r15
 49a:	0f 93       	push	r16
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	c8 2f       	mov	r28, r24
 4a2:	7b 01       	movw	r14, r22
 4a4:	6a 01       	movw	r12, r20
 4a6:	59 01       	movw	r10, r18
	// Receive the status of the buffers RXB0 and RXB1
	uint8_t status = MCP2515_check_receive_status(CANbus);
 4a8:	e1 df       	rcall	.-62     	; 0x46c <MCP2515_check_receive_status>
	// Check which receive buffer contains the data (or if both contain) by checking bits 7:6
	switch(status>>6) {
 4aa:	82 95       	swap	r24
 4ac:	86 95       	lsr	r24
 4ae:	86 95       	lsr	r24
 4b0:	83 70       	andi	r24, 0x03	; 3
 4b2:	82 30       	cpi	r24, 0x02	; 2
 4b4:	59 f0       	breq	.+22     	; 0x4cc <CAN_pull_packet+0x3e>
 4b6:	83 30       	cpi	r24, 0x03	; 3
 4b8:	81 f0       	breq	.+32     	; 0x4da <CAN_pull_packet+0x4c>
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	c9 f4       	brne	.+50     	; 0x4f0 <CAN_pull_packet+0x62>
		case 1:	// Message in RXB0
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
 4be:	85 01       	movw	r16, r10
 4c0:	96 01       	movw	r18, r12
 4c2:	a7 01       	movw	r20, r14
 4c4:	61 e6       	ldi	r22, 0x61	; 97
 4c6:	8c 2f       	mov	r24, r28
 4c8:	50 df       	rcall	.-352    	; 0x36a <MCP2515_PullCanPacket>
			break;
 4ca:	12 c0       	rjmp	.+36     	; 0x4f0 <CAN_pull_packet+0x62>
		case 2: // Message in RXB1=
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB1SIDH, numBytes, data, ID);
 4cc:	85 01       	movw	r16, r10
 4ce:	96 01       	movw	r18, r12
 4d0:	a7 01       	movw	r20, r14
 4d2:	61 e7       	ldi	r22, 0x71	; 113
 4d4:	8c 2f       	mov	r24, r28
 4d6:	49 df       	rcall	.-366    	; 0x36a <MCP2515_PullCanPacket>
			break;
 4d8:	0b c0       	rjmp	.+22     	; 0x4f0 <CAN_pull_packet+0x62>
		case 3: // Message in both buffers
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
 4da:	85 01       	movw	r16, r10
 4dc:	96 01       	movw	r18, r12
 4de:	a7 01       	movw	r20, r14
 4e0:	61 e6       	ldi	r22, 0x61	; 97
 4e2:	8c 2f       	mov	r24, r28
 4e4:	42 df       	rcall	.-380    	; 0x36a <MCP2515_PullCanPacket>
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB1SIDH, numBytes, data, ID);
 4e6:	96 01       	movw	r18, r12
 4e8:	a7 01       	movw	r20, r14
 4ea:	61 e7       	ldi	r22, 0x71	; 113
 4ec:	8c 2f       	mov	r24, r28
 4ee:	3d df       	rcall	.-390    	; 0x36a <MCP2515_PullCanPacket>
			break;
		default:
			break;
	}
}
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	ff 90       	pop	r15
 4f8:	ef 90       	pop	r14
 4fa:	df 90       	pop	r13
 4fc:	cf 90       	pop	r12
 4fe:	bf 90       	pop	r11
 500:	af 90       	pop	r10
 502:	08 95       	ret

00000504 <SPI_send_byte>:
#include "SPI.h"

uint8_t SPI_send_byte(uint8_t c)
{
	SPDR = c;					//write data to the transmission register. Writing to this initiates transmission.
 504:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 506:	0d b4       	in	r0, 0x2d	; 45
 508:	07 fe       	sbrs	r0, 7
 50a:	fd cf       	rjmp	.-6      	; 0x506 <SPI_send_byte+0x2>
	return SPDR;				//return any data that was shifted into this register upon transmission.
 50c:	8e b5       	in	r24, 0x2e	; 46
}
 50e:	08 95       	ret

00000510 <SPI_init>:

void SPI_init()
{
	//MCUCR &= ~(1<<SPIPS);		//make sure we are getting spi not on the _A spi pins.
	SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(1<<SPR0)|(0<<SPR1);  //set interrupt, enable SPI, MSB mode, set as master, low is idle, read on leading edge, Set to speed(fosc/64) SPR0=1, SPR1=0
 510:	81 e5       	ldi	r24, 0x51	; 81
 512:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X);	//set whether we want 2x speed or not (1=2x speed).
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	8d bd       	out	0x2d, r24	; 45
	SPDR = 0x00;		//ensure data register has nothing in it
 518:	1e bc       	out	0x2e, r1	; 46
 51a:	08 95       	ret

0000051c <memcpy>:
 51c:	fb 01       	movw	r30, r22
 51e:	dc 01       	movw	r26, r24
 520:	02 c0       	rjmp	.+4      	; 0x526 <memcpy+0xa>
 522:	01 90       	ld	r0, Z+
 524:	0d 92       	st	X+, r0
 526:	41 50       	subi	r20, 0x01	; 1
 528:	50 40       	sbci	r21, 0x00	; 0
 52a:	d8 f7       	brcc	.-10     	; 0x522 <memcpy+0x6>
 52c:	08 95       	ret

0000052e <_exit>:
 52e:	f8 94       	cli

00000530 <__stop_program>:
 530:	ff cf       	rjmp	.-2      	; 0x530 <__stop_program>
